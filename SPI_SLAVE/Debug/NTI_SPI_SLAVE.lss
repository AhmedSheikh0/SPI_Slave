
NTI_SPI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  00003e8c  00003f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800194  00800194  00004054  2**0
                  ALLOC
  3 .stab         00004074  00000000  00000000  00004054  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a52  00000000  00000000  000080c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00009b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00009cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00009f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000c7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000dde5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000f1c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000f3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000f6d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010129  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__vector_1>
       8:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__vector_2>
       c:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__vector_6>
      1c:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__vector_12>
      34:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_13>
      38:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_14>
      3c:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_15>
      40:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <main>
      8a:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 16 1f 	jmp	0x3e2c	; 0x3e2c <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 32 1f 	jmp	0x3e64	; 0x3e64 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 15 1f 	jmp	0x3e2a	; 0x3e2a <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 31 1f 	jmp	0x3e62	; 0x3e62 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ea 58       	subi	r30, 0x8A	; 138
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <USART_voidInit>:
void (*Private_voidRXFunc)(void) = NULL;
void (*Private_voidUDRFunc)(void) = NULL;
void (*Private_voidTXFunc)(void) = NULL;

void USART_voidInit(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRC, UCSRC_URSEL); // Using UCSRC
     f52:	a0 e4       	ldi	r26, 0x40	; 64
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e0 e4       	ldi	r30, 0x40	; 64
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 68       	ori	r24, 0x80	; 128
     f5e:	8c 93       	st	X, r24

	// ASYNCHRONOUS MODE
#if 	MODE_OF_OPERATION == ASYNCHRONOUS
	Clear_Bit(UCSRC, UCSRC_UMSEL);
     f60:	a0 e4       	ldi	r26, 0x40	; 64
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e0 e4       	ldi	r30, 0x40	; 64
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8f 7b       	andi	r24, 0xBF	; 191
     f6c:	8c 93       	st	X, r24
	Clear_Bit(UCSRC, UCSRC_UCPOL);
     f6e:	a0 e4       	ldi	r26, 0x40	; 64
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e0 e4       	ldi	r30, 0x40	; 64
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8e 7f       	andi	r24, 0xFE	; 254
     f7a:	8c 93       	st	X, r24
	// Select Speed in Asynchronous MOde
#if 	SPEED_OPERATION == NORMAL_SPEED_MODE
	Clear_Bit(UCSRA, UCSRA_U2X);
#define UBRRL_VAL 	( (F_OC / (16 * BAUD_RATE) ) - 1)
#elif 	SPEED_OPERATION == DOUBLE_SPEED_MODE
	Set_Bit(UCSRC, UCSRA_U2X);
     f7c:	a0 e4       	ldi	r26, 0x40	; 64
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e0 e4       	ldi	r30, 0x40	; 64
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	82 60       	ori	r24, 0x02	; 2
     f88:	8c 93       	st	X, r24
#define UBRRL_VAL ( (F_OC / (2 * BAUD_RATE) ) - 1)

#else
#endif

	Set_Bit(UCSRC, UCSRC_URSEL);
     f8a:	a0 e4       	ldi	r26, 0x40	; 64
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e0 e4       	ldi	r30, 0x40	; 64
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	80 68       	ori	r24, 0x80	; 128
     f96:	8c 93       	st	X, r24

	// Selecting Frame
#if 	FRAME_SIZE == 8
	Set_Bit(UCSRC, UCSRC_UCSZ0);
     f98:	a0 e4       	ldi	r26, 0x40	; 64
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e0 e4       	ldi	r30, 0x40	; 64
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	82 60       	ori	r24, 0x02	; 2
     fa4:	8c 93       	st	X, r24
	Set_Bit(UCSRC, UCSRC_UCSZ1);
     fa6:	a0 e4       	ldi	r26, 0x40	; 64
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e0 e4       	ldi	r30, 0x40	; 64
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	84 60       	ori	r24, 0x04	; 4
     fb2:	8c 93       	st	X, r24
	Clear_Bit(UCSRB, UCSRB_UCSZ2);
     fb4:	aa e2       	ldi	r26, 0x2A	; 42
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ea e2       	ldi	r30, 0x2A	; 42
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8b 7f       	andi	r24, 0xFB	; 251
     fc0:	8c 93       	st	X, r24
#endif


	// Selecting Parity Mode
#if 	PARITY_MODE == DISABLED_PARTITY
	Clear_Bit(UCSRC, UCSRC_UPM0);
     fc2:	a0 e4       	ldi	r26, 0x40	; 64
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e0 e4       	ldi	r30, 0x40	; 64
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8f 7e       	andi	r24, 0xEF	; 239
     fce:	8c 93       	st	X, r24
	Clear_Bit(UCSRC, UCSRC_UPM1);
     fd0:	a0 e4       	ldi	r26, 0x40	; 64
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e0 e4       	ldi	r30, 0x40	; 64
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8f 7d       	andi	r24, 0xDF	; 223
     fdc:	8c 93       	st	X, r24
	// Select Stop Bit
#if 	STOP_BIT_SELECT == ONE_BIT
	Clear_Bit(UCSRC, UCSRC_USBS);

#elif 	STOP_BIT_SELECT == TWO_BIT
	Set_Bit(UCSRC, UCSRC_USBS);
     fde:	a0 e4       	ldi	r26, 0x40	; 64
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e0 e4       	ldi	r30, 0x40	; 64
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 60       	ori	r24, 0x08	; 8
     fea:	8c 93       	st	X, r24
#else
#endif



	Clear_Bit(UCSRC, UCSRC_URSEL);
     fec:	a0 e4       	ldi	r26, 0x40	; 64
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e0 e4       	ldi	r30, 0x40	; 64
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8f 77       	andi	r24, 0x7F	; 127
     ff8:	8c 93       	st	X, r24
	// Calculating UBRRL value
	UCSRC = 0;
     ffa:	e0 e4       	ldi	r30, 0x40	; 64
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	10 82       	st	Z, r1
	UBRRL = UBRRL_VAL;
    1000:	e9 e2       	ldi	r30, 0x29	; 41
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	8f ec       	ldi	r24, 0xCF	; 207
    1006:	80 83       	st	Z, r24


	// Enabling TX and RX
	Set_Bit(UCSRB, UCSRB_TXEN);
    1008:	aa e2       	ldi	r26, 0x2A	; 42
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ea e2       	ldi	r30, 0x2A	; 42
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 60       	ori	r24, 0x08	; 8
    1014:	8c 93       	st	X, r24
	Set_Bit(UCSRB, UCSRB_RXEN);
    1016:	aa e2       	ldi	r26, 0x2A	; 42
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	ea e2       	ldi	r30, 0x2A	; 42
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	80 61       	ori	r24, 0x10	; 16
    1022:	8c 93       	st	X, r24

}
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <USART_voidSend>:

void USART_voidSend(u8 Copy_u8Data)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	0f 92       	push	r0
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
	while(Get_Bit(UCSRA, UCSRA_UDRE) == 0 );
    1036:	eb e2       	ldi	r30, 0x2B	; 43
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	82 95       	swap	r24
    103e:	86 95       	lsr	r24
    1040:	87 70       	andi	r24, 0x07	; 7
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	81 70       	andi	r24, 0x01	; 1
    1048:	90 70       	andi	r25, 0x00	; 0
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	a1 f3       	breq	.-24     	; 0x1036 <USART_voidSend+0xc>

	UDR = Copy_u8Data;
    104e:	ec e2       	ldi	r30, 0x2C	; 44
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	80 83       	st	Z, r24
}
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <USART_u8Receive>:


u8 USART_u8Receive(void)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
	while( Get_Bit(UCSRA, UCSRA_RXC) == 0 );
    1066:	eb e2       	ldi	r30, 0x2B	; 43
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	88 23       	and	r24, r24
    106e:	dc f7       	brge	.-10     	; 0x1066 <USART_u8Receive+0x8>

	return UDR;
    1070:	ec e2       	ldi	r30, 0x2C	; 44
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <USART_u8TransReceive>:

u8 USART_u8TransReceive( u8 Copy_u8Data )
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	0f 92       	push	r0
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	89 83       	std	Y+1, r24	; 0x01
	// wait until UDRE is zero to send
	while(Get_Bit(UCSRA, UCSRA_UDRE) == 0 );
    1088:	eb e2       	ldi	r30, 0x2B	; 43
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	82 95       	swap	r24
    1090:	86 95       	lsr	r24
    1092:	87 70       	andi	r24, 0x07	; 7
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	81 70       	andi	r24, 0x01	; 1
    109a:	90 70       	andi	r25, 0x00	; 0
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	a1 f3       	breq	.-24     	; 0x1088 <USART_u8TransReceive+0xc>
	UDR = Copy_u8Data;
    10a0:	ec e2       	ldi	r30, 0x2C	; 44
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	80 83       	st	Z, r24

	// Wait Until Receive flag is zero
	while( Get_Bit(UCSRA, UCSRA_RXC) == 0 );
    10a8:	eb e2       	ldi	r30, 0x2B	; 43
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	88 23       	and	r24, r24
    10b0:	dc f7       	brge	.-10     	; 0x10a8 <USART_u8TransReceive+0x2c>

	return UDR;
    10b2:	ec e2       	ldi	r30, 0x2C	; 44
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z

}
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <USART_voidSendInterrupt>:

// Interrupt RX/TX

void USART_voidSendInterrupt(u8 Copy_u8Data)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	0f 92       	push	r0
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	89 83       	std	Y+1, r24	; 0x01
	UDR = Copy_u8Data;
    10cc:	ec e2       	ldi	r30, 0x2C	; 44
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	80 83       	st	Z, r24
}
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <USART_u8ReceiveInterrupt>:

u8 USART_u8ReceiveInterrupt(void)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    10e4:	ec e2       	ldi	r30, 0x2C	; 44
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
}
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <USART_voidSendText>:

// RX/TX
void USART_voidSendText(char *Copy_u8Data)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <USART_voidSendText+0x6>
    10f6:	0f 92       	push	r0
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	9b 83       	std	Y+3, r25	; 0x03
    10fe:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1100:	19 82       	std	Y+1, r1	; 0x01
    1102:	0e c0       	rjmp	.+28     	; 0x1120 <USART_voidSendText+0x30>

	while( *(Copy_u8Data + i) != '\0')
	{
		USART_voidSend( *(Copy_u8Data + i) );
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	9b 81       	ldd	r25, Y+3	; 0x03
    110e:	fc 01       	movw	r30, r24
    1110:	e2 0f       	add	r30, r18
    1112:	f3 1f       	adc	r31, r19
    1114:	80 81       	ld	r24, Z
    1116:	0e 94 15 08 	call	0x102a	; 0x102a <USART_voidSend>
		i++;
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	89 83       	std	Y+1, r24	; 0x01
// RX/TX
void USART_voidSendText(char *Copy_u8Data)
{
	u8 i = 0;

	while( *(Copy_u8Data + i) != '\0')
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	9b 81       	ldd	r25, Y+3	; 0x03
    112a:	fc 01       	movw	r30, r24
    112c:	e2 0f       	add	r30, r18
    112e:	f3 1f       	adc	r31, r19
    1130:	80 81       	ld	r24, Z
    1132:	88 23       	and	r24, r24
    1134:	39 f7       	brne	.-50     	; 0x1104 <USART_voidSendText+0x14>
	{
		USART_voidSend( *(Copy_u8Data + i) );
		i++;
	}

}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <USART_voidReceiveText>:

void USART_voidReceiveText(char *Copy_u8Data)
{
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <USART_voidReceiveText+0xa>
    114c:	0f 92       	push	r0
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9b 83       	std	Y+3, r25	; 0x03
    1154:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1156:	19 82       	std	Y+1, r1	; 0x01
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <USART_voidReceiveText+0x36>
	while( *(Copy_u8Data + i) != '\0' )
	{
		*(Copy_u8Data + i) = USART_u8Receive();
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	9b 81       	ldd	r25, Y+3	; 0x03
    1164:	8c 01       	movw	r16, r24
    1166:	02 0f       	add	r16, r18
    1168:	13 1f       	adc	r17, r19
    116a:	0e 94 2f 08 	call	0x105e	; 0x105e <USART_u8Receive>
    116e:	f8 01       	movw	r30, r16
    1170:	80 83       	st	Z, r24
		i++;
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	8f 5f       	subi	r24, 0xFF	; 255
    1176:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidReceiveText(char *Copy_u8Data)
{
	u8 i = 0;
	while( *(Copy_u8Data + i) != '\0' )
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	9b 81       	ldd	r25, Y+3	; 0x03
    1182:	fc 01       	movw	r30, r24
    1184:	e2 0f       	add	r30, r18
    1186:	f3 1f       	adc	r31, r19
    1188:	80 81       	ld	r24, Z
    118a:	88 23       	and	r24, r24
    118c:	31 f7       	brne	.-52     	; 0x115a <USART_voidReceiveText+0x18>
	{
		*(Copy_u8Data + i) = USART_u8Receive();
		i++;
	}
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <USART_voidRXCallBackFunc>:

void USART_voidRXCallBackFunc(void (*PTR)(void))
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <USART_voidRXCallBackFunc+0x6>
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	9a 83       	std	Y+2, r25	; 0x02
    11aa:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	31 f0       	breq	.+12     	; 0x11c0 <USART_voidRXCallBackFunc+0x22>
	{
		Private_voidRXFunc = PTR;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	90 93 95 01 	sts	0x0195, r25
    11bc:	80 93 94 01 	sts	0x0194, r24
	}
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <USART_voidTXCallBackFunc>:

void USART_voidTXCallBackFunc(void (*PTR)(void))
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <USART_voidTXCallBackFunc+0x6>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	9a 83       	std	Y+2, r25	; 0x02
    11d6:	89 83       	std	Y+1, r24	; 0x01
	if( PTR != NULL )
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	31 f0       	breq	.+12     	; 0x11ec <USART_voidTXCallBackFunc+0x22>
	{
		Private_voidTXFunc = PTR;
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	90 93 99 01 	sts	0x0199, r25
    11e8:	80 93 98 01 	sts	0x0198, r24
	}
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <USART_voidUDRCallBackFunc>:

void USART_voidUDRCallBackFunc(void (*PTR)(void) )
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <USART_voidUDRCallBackFunc+0x6>
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01
	if( PTR != NULL )
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	31 f0       	breq	.+12     	; 0x1218 <USART_voidUDRCallBackFunc+0x22>
	{
		Private_voidUDRFunc = PTR;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	90 93 97 01 	sts	0x0197, r25
    1214:	80 93 96 01 	sts	0x0196, r24
	}
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <USART_voidRXEnableInterrupt>:

void USART_voidRXEnableInterrupt()
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRB,UCSRB_RXCIE);
    122a:	aa e2       	ldi	r26, 0x2A	; 42
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ea e2       	ldi	r30, 0x2A	; 42
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	80 68       	ori	r24, 0x80	; 128
    1236:	8c 93       	st	X, r24
}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <USART_voidRXDisableInterrupt>:

void USART_voidRXDisableInterrupt()
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(UCSRB,UCSRB_RXCIE);
    1246:	aa e2       	ldi	r26, 0x2A	; 42
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	ea e2       	ldi	r30, 0x2A	; 42
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	8f 77       	andi	r24, 0x7F	; 127
    1252:	8c 93       	st	X, r24
}
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <USART_voidTXEnableInterrupt>:

void USART_voidTXEnableInterrupt()
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRB,UCSRB_TXCIE);
    1262:	aa e2       	ldi	r26, 0x2A	; 42
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	ea e2       	ldi	r30, 0x2A	; 42
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	80 64       	ori	r24, 0x40	; 64
    126e:	8c 93       	st	X, r24
}
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <USART_voidTXDisableInterrupt>:

void USART_voidTXDisableInterrupt()
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(UCSRB,UCSRB_TXCIE);
    127e:	aa e2       	ldi	r26, 0x2A	; 42
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ea e2       	ldi	r30, 0x2A	; 42
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	8f 7b       	andi	r24, 0xBF	; 191
    128a:	8c 93       	st	X, r24
}
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <USART_voidUDREnableInterrupt>:


void USART_voidUDREnableInterrupt()
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(UCSRB,UCSRB_UDRIE);
    129a:	aa e2       	ldi	r26, 0x2A	; 42
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ea e2       	ldi	r30, 0x2A	; 42
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	80 62       	ori	r24, 0x20	; 32
    12a6:	8c 93       	st	X, r24
}
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <USART_voidUDRDisableInterrupt>:

void USART_voidUDRDisableInterrupt()
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(UCSRB,UCSRB_UDRIE);
    12b6:	aa e2       	ldi	r26, 0x2A	; 42
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	ea e2       	ldi	r30, 0x2A	; 42
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	8f 7d       	andi	r24, 0xDF	; 223
    12c2:	8c 93       	st	X, r24
}
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <__vector_13>:


void __vector_13(void)__attribute__((signal,used, externally_visible));
void __vector_13(void)
{
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	2f 93       	push	r18
    12d6:	3f 93       	push	r19
    12d8:	4f 93       	push	r20
    12da:	5f 93       	push	r21
    12dc:	6f 93       	push	r22
    12de:	7f 93       	push	r23
    12e0:	8f 93       	push	r24
    12e2:	9f 93       	push	r25
    12e4:	af 93       	push	r26
    12e6:	bf 93       	push	r27
    12e8:	ef 93       	push	r30
    12ea:	ff 93       	push	r31
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
	if( Private_voidRXFunc != NULL )
    12f4:	80 91 94 01 	lds	r24, 0x0194
    12f8:	90 91 95 01 	lds	r25, 0x0195
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	29 f0       	breq	.+10     	; 0x130a <__vector_13+0x40>
	{
		Private_voidRXFunc();
    1300:	e0 91 94 01 	lds	r30, 0x0194
    1304:	f0 91 95 01 	lds	r31, 0x0195
    1308:	09 95       	icall
	}
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	ff 91       	pop	r31
    1310:	ef 91       	pop	r30
    1312:	bf 91       	pop	r27
    1314:	af 91       	pop	r26
    1316:	9f 91       	pop	r25
    1318:	8f 91       	pop	r24
    131a:	7f 91       	pop	r23
    131c:	6f 91       	pop	r22
    131e:	5f 91       	pop	r21
    1320:	4f 91       	pop	r20
    1322:	3f 91       	pop	r19
    1324:	2f 91       	pop	r18
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

00001330 <__vector_14>:

void __vector_14(void)__attribute__((signal,used, externally_visible));
void __vector_14(void)
{
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	2f 93       	push	r18
    133c:	3f 93       	push	r19
    133e:	4f 93       	push	r20
    1340:	5f 93       	push	r21
    1342:	6f 93       	push	r22
    1344:	7f 93       	push	r23
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	ef 93       	push	r30
    1350:	ff 93       	push	r31
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
	if( Private_voidUDRFunc != NULL )
    135a:	80 91 96 01 	lds	r24, 0x0196
    135e:	90 91 97 01 	lds	r25, 0x0197
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	29 f0       	breq	.+10     	; 0x1370 <__vector_14+0x40>
	{
		Private_voidUDRFunc();
    1366:	e0 91 96 01 	lds	r30, 0x0196
    136a:	f0 91 97 01 	lds	r31, 0x0197
    136e:	09 95       	icall
	}
}
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	4f 91       	pop	r20
    1388:	3f 91       	pop	r19
    138a:	2f 91       	pop	r18
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <__vector_15>:

void __vector_15(void) __attribute__((signal,used, externally_visible));
void __vector_15(void)
{
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	6f 93       	push	r22
    13aa:	7f 93       	push	r23
    13ac:	8f 93       	push	r24
    13ae:	9f 93       	push	r25
    13b0:	af 93       	push	r26
    13b2:	bf 93       	push	r27
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
	if( Private_voidTXFunc != NULL )
    13c0:	80 91 98 01 	lds	r24, 0x0198
    13c4:	90 91 99 01 	lds	r25, 0x0199
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	29 f0       	breq	.+10     	; 0x13d6 <__vector_15+0x40>
	{
		Private_voidTXFunc();
    13cc:	e0 91 98 01 	lds	r30, 0x0198
    13d0:	f0 91 99 01 	lds	r31, 0x0199
    13d4:	09 95       	icall
	}
}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <TMR1_voidInit>:
#include "TMR1_Interface.h"

static void (*Global_pvTimerICUCallBack)(void)= NULL;
static void (*Global_pvTimerCTCCallBack)(void)= NULL;

void TMR1_voidInit(){
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
	//Configure TIMER1
	TCCR1A = 0;
    1404:	ef e4       	ldi	r30, 0x4F	; 79
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	10 82       	st	Z, r1
	TCCR1B = 0;
    140a:	ee e4       	ldi	r30, 0x4E	; 78
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	10 82       	st	Z, r1
	/*Timer Over flow flag Enable*/
	SET_BIT(TIMSK, TIMSK_TOIE);

#elif     TIMER1_Mode == TIMER1_CTC
	/*Choose CTC Mode*/
	CLR_BIT(TCCR1A, TCCR1A_WGM10);
    1410:	af e4       	ldi	r26, 0x4F	; 79
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ef e4       	ldi	r30, 0x4F	; 79
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8e 7f       	andi	r24, 0xFE	; 254
    141c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, TCCR1A_WGM11);
    141e:	af e4       	ldi	r26, 0x4F	; 79
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	ef e4       	ldi	r30, 0x4F	; 79
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8d 7f       	andi	r24, 0xFD	; 253
    142a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_WGM12);
    142c:	ae e4       	ldi	r26, 0x4E	; 78
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ee e4       	ldi	r30, 0x4E	; 78
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	88 60       	ori	r24, 0x08	; 8
    1438:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_WGM13);
    143a:	ae e4       	ldi	r26, 0x4E	; 78
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ee e4       	ldi	r30, 0x4E	; 78
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	8f 7e       	andi	r24, 0xEF	; 239
    1446:	8c 93       	st	X, r24

	/*OUTPUT COMPARE MATCH INTERRUPT ENABLE*/
	SET_BIT(TIMSK, TIMSK_OCIE1A);
    1448:	a9 e5       	ldi	r26, 0x59	; 89
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e9 e5       	ldi	r30, 0x59	; 89
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	80 61       	ori	r24, 0x10	; 16
    1454:	8c 93       	st	X, r24

	/*Set compare match value to 25000*/
	OCR1A = 24999;
    1456:	ea e4       	ldi	r30, 0x4A	; 74
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	87 ea       	ldi	r24, 0xA7	; 167
    145c:	91 e6       	ldi	r25, 0x61	; 97
    145e:	91 83       	std	Z+1, r25	; 0x01
    1460:	80 83       	st	Z, r24
	/*Set PRESCALAR 64*/
	SET_BIT(TCCR1B, TCCR1B_CS10);
    1462:	ae e4       	ldi	r26, 0x4E	; 78
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	ee e4       	ldi	r30, 0x4E	; 78
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	81 60       	ori	r24, 0x01	; 1
    146e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_CS11);
    1470:	ae e4       	ldi	r26, 0x4E	; 78
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ee e4       	ldi	r30, 0x4E	; 78
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	82 60       	ori	r24, 0x02	; 2
    147c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, TCCR1B_CS12);
    147e:	ae e4       	ldi	r26, 0x4E	; 78
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ee e4       	ldi	r30, 0x4E	; 78
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8b 7f       	andi	r24, 0xFB	; 251
    148a:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TIMSK_TICIE1);
#endif
//	SET_BIT(TCCR1B,TCCR1B_CS10);
//	CLR_BIT(TCCR1B,TCCR1B_CS11);
//	SET_BIT(TCCR1B,TCCR1B_CS12);
}
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <TMR1_voidSetICR>:

void TMR1_voidSetICR(u16 value){
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <TMR1_voidSetICR+0x6>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = value;
    14a0:	e6 e4       	ldi	r30, 0x46	; 70
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	9a 81       	ldd	r25, Y+2	; 0x02
    14a8:	91 83       	std	Z+1, r25	; 0x01
    14aa:	80 83       	st	Z, r24
}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <TMR1_voidSetTimerValue>:

void TMR1_voidSetTimerValue(u16 value){
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <TMR1_voidSetTimerValue+0x6>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = value;
    14c4:	ec e4       	ldi	r30, 0x4C	; 76
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
}
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <TMR1_u16ReadTimerValue>:
u16 TMR1_u16ReadTimerValue(){
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    14e2:	ec e4       	ldi	r30, 0x4C	; 76
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
}
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <TMR1_voidSetDutyCycle>:

void TMR1_voidSetDutyCycle(u16 duty){
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <TMR1_voidSetDutyCycle+0x6>
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = duty;
    14fe:	ea e4       	ldi	r30, 0x4A	; 74
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	80 83       	st	Z, r24
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <TMR1_ICUsetEdgeDetectionMode>:

void TMR1_ICUsetEdgeDetectionMode(u8 edge)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
	if(edge == TIMER1_RISING){
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	41 f4       	brne	.+16     	; 0x1536 <TMR1_ICUsetEdgeDetectionMode+0x22>
		SET_BIT(TCCR1B,TCCR1B_ICES);
    1526:	ae e4       	ldi	r26, 0x4E	; 78
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ee e4       	ldi	r30, 0x4E	; 78
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 64       	ori	r24, 0x40	; 64
    1532:	8c 93       	st	X, r24
    1534:	0a c0       	rjmp	.+20     	; 0x154a <TMR1_ICUsetEdgeDetectionMode+0x36>
	}
	else if(edge == TIMER1_FALLING){
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	88 23       	and	r24, r24
    153a:	39 f4       	brne	.+14     	; 0x154a <TMR1_ICUsetEdgeDetectionMode+0x36>
		CLR_BIT(TCCR1B,TCCR1B_ICES);
    153c:	ae e4       	ldi	r26, 0x4E	; 78
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ee e4       	ldi	r30, 0x4E	; 78
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8f 7b       	andi	r24, 0xBF	; 191
    1548:	8c 93       	st	X, r24
	}
}
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <TMR1_ICUgetInputCaptureValue>:

u16 TMR1_ICUgetInputCaptureValue()
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    155a:	e6 e4       	ldi	r30, 0x46	; 70
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	91 81       	ldd	r25, Z+1	; 0x01
}
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <TMR1_ICUclearTimerValue>:

void TMR1_ICUclearTimerValue()
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1570:	ec e4       	ldi	r30, 0x4C	; 76
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	11 82       	std	Z+1, r1	; 0x01
    1576:	10 82       	st	Z, r1
}
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <TMR1_ICUDeInit>:

void TMR1_ICUDeInit()
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1586:	ef e4       	ldi	r30, 0x4F	; 79
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	10 82       	st	Z, r1
	TCCR1B = 0;
    158c:	ee e4       	ldi	r30, 0x4E	; 78
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	10 82       	st	Z, r1
	TCNT1  = 0;
    1592:	ec e4       	ldi	r30, 0x4C	; 76
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	11 82       	std	Z+1, r1	; 0x01
    1598:	10 82       	st	Z, r1
	ICR1   = 0;
    159a:	e6 e4       	ldi	r30, 0x46	; 70
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	11 82       	std	Z+1, r1	; 0x01
    15a0:	10 82       	st	Z, r1

	/* Disable the interrupt */
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    15a2:	a9 e5       	ldi	r26, 0x59	; 89
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e9 e5       	ldi	r30, 0x59	; 89
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 7d       	andi	r24, 0xDF	; 223
    15ae:	8c 93       	st	X, r24
}
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <TMR1_voidTimer1ICUSetCallBack>:

void TMR1_voidTimer1ICUSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <TMR1_voidTimer1ICUSetCallBack+0x6>
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	9a 83       	std	Y+2, r25	; 0x02
    15c2:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerICUCallBack = Copy_pvCallBackFunc;
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	90 93 9b 01 	sts	0x019B, r25
    15cc:	80 93 9a 01 	sts	0x019A, r24
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <TMR1_voidTimer1CTCSetCallBack>:

void TMR1_voidTimer1CTCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <TMR1_voidTimer1CTCSetCallBack+0x6>
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerCTCCallBack = Copy_pvCallBackFunc;
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	90 93 9d 01 	sts	0x019D, r25
    15f0:	80 93 9c 01 	sts	0x019C, r24
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    15fe:	1f 92       	push	r1
    1600:	0f 92       	push	r0
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	0f 92       	push	r0
    1606:	11 24       	eor	r1, r1
    1608:	2f 93       	push	r18
    160a:	3f 93       	push	r19
    160c:	4f 93       	push	r20
    160e:	5f 93       	push	r21
    1610:	6f 93       	push	r22
    1612:	7f 93       	push	r23
    1614:	8f 93       	push	r24
    1616:	9f 93       	push	r25
    1618:	af 93       	push	r26
    161a:	bf 93       	push	r27
    161c:	ef 93       	push	r30
    161e:	ff 93       	push	r31
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerICUCallBack != NULL){
    1628:	80 91 9a 01 	lds	r24, 0x019A
    162c:	90 91 9b 01 	lds	r25, 0x019B
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	29 f0       	breq	.+10     	; 0x163e <__vector_6+0x40>
		Global_pvTimerICUCallBack();
    1634:	e0 91 9a 01 	lds	r30, 0x019A
    1638:	f0 91 9b 01 	lds	r31, 0x019B
    163c:	09 95       	icall
	}
}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	bf 91       	pop	r27
    1648:	af 91       	pop	r26
    164a:	9f 91       	pop	r25
    164c:	8f 91       	pop	r24
    164e:	7f 91       	pop	r23
    1650:	6f 91       	pop	r22
    1652:	5f 91       	pop	r21
    1654:	4f 91       	pop	r20
    1656:	3f 91       	pop	r19
    1658:	2f 91       	pop	r18
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    1664:	1f 92       	push	r1
    1666:	0f 92       	push	r0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	0f 92       	push	r0
    166c:	11 24       	eor	r1, r1
    166e:	2f 93       	push	r18
    1670:	3f 93       	push	r19
    1672:	4f 93       	push	r20
    1674:	5f 93       	push	r21
    1676:	6f 93       	push	r22
    1678:	7f 93       	push	r23
    167a:	8f 93       	push	r24
    167c:	9f 93       	push	r25
    167e:	af 93       	push	r26
    1680:	bf 93       	push	r27
    1682:	ef 93       	push	r30
    1684:	ff 93       	push	r31
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerCTCCallBack != NULL){
    168e:	80 91 9c 01 	lds	r24, 0x019C
    1692:	90 91 9d 01 	lds	r25, 0x019D
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	29 f0       	breq	.+10     	; 0x16a4 <__vector_7+0x40>
		Global_pvTimerCTCCallBack();
    169a:	e0 91 9c 01 	lds	r30, 0x019C
    169e:	f0 91 9d 01 	lds	r31, 0x019D
    16a2:	09 95       	icall
	}
}
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	bf 91       	pop	r27
    16ae:	af 91       	pop	r26
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	7f 91       	pop	r23
    16b6:	6f 91       	pop	r22
    16b8:	5f 91       	pop	r21
    16ba:	4f 91       	pop	r20
    16bc:	3f 91       	pop	r19
    16be:	2f 91       	pop	r18
    16c0:	0f 90       	pop	r0
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	0f 90       	pop	r0
    16c6:	1f 90       	pop	r1
    16c8:	18 95       	reti

000016ca <SPI_voidMasterInit>:
#include "SPI_Interface.h"

void (*Private_voidSPIFunc)(void) = NULL;

void SPI_voidMasterInit(void)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Master */
	Set_Bit(SPCR, SPCR_MSTR);
    16d2:	ad e2       	ldi	r26, 0x2D	; 45
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ed e2       	ldi	r30, 0x2D	; 45
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 61       	ori	r24, 0x10	; 16
    16de:	8c 93       	st	X, r24

#if 	INTERRUPT_MODE == ENABLE_INTERRUPT
	Set_Bit(SPCR, SPCR_SPIE);
    16e0:	ad e2       	ldi	r26, 0x2D	; 45
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ed e2       	ldi	r30, 0x2D	; 45
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	80 68       	ori	r24, 0x80	; 128
    16ec:	8c 93       	st	X, r24
#else
#endif


#if 	DATA_ORDER == LSB_FIRST
	Set_Bit(SPCR, SPCR_DORD);
    16ee:	ad e2       	ldi	r26, 0x2D	; 45
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ed e2       	ldi	r30, 0x2D	; 45
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	80 62       	ori	r24, 0x20	; 32
    16fa:	8c 93       	st	X, r24
#else
#endif


#if 	CLOCK_POLARITY == IDLE_LOW
	Clear_Bit(SPCR, SPCR_CPOL);
    16fc:	ad e2       	ldi	r26, 0x2D	; 45
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ed e2       	ldi	r30, 0x2D	; 45
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	87 7f       	andi	r24, 0xF7	; 247
    1708:	8c 93       	st	X, r24
#else
#endif


#if 	CLOCK_PHASE == ZERO
	Clear_Bit(SPCR, SPCR_CPHA);
    170a:	ad e2       	ldi	r26, 0x2D	; 45
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ed e2       	ldi	r30, 0x2D	; 45
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	8b 7f       	andi	r24, 0xFB	; 251
    1716:	8c 93       	st	X, r24
	Set_Bit(SPCR, SPCR_CPOL);
#else
#endif

#if 	SPI_FREQUENCY == QUARTER_FREQ
	Clear_Bit(SPCR, SPCR_SPR0);
    1718:	ad e2       	ldi	r26, 0x2D	; 45
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	ed e2       	ldi	r30, 0x2D	; 45
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	8e 7f       	andi	r24, 0xFE	; 254
    1724:	8c 93       	st	X, r24
	Clear_Bit(SPCR, SPCR_SPR1);
    1726:	ad e2       	ldi	r26, 0x2D	; 45
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ed e2       	ldi	r30, 0x2D	; 45
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	8d 7f       	andi	r24, 0xFD	; 253
    1732:	8c 93       	st	X, r24
	Clear_Bit(SPSR, SPSR_SPI2X);
    1734:	ae e2       	ldi	r26, 0x2E	; 46
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ee e2       	ldi	r30, 0x2E	; 46
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8e 7f       	andi	r24, 0xFE	; 254
    1740:	8c 93       	st	X, r24
	//	Set_Bit(SPCR, SPCR_SPR0);
	//	Clear_Bit(SPCR, SPCR_SPR1);
	//	Clear_Bit(SPSR, SPSR_SPI2X);

	/* SPI Enable */
	Set_Bit(SPCR,SPCR_SPE);
    1742:	ad e2       	ldi	r26, 0x2D	; 45
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ed e2       	ldi	r30, 0x2D	; 45
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 64       	ori	r24, 0x40	; 64
    174e:	8c 93       	st	X, r24

}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <SPI_voidSlaveInit>:

void SPI_voidSlaveInit(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	/* Initialize Slave */
	Clear_Bit(SPCR, SPCR_MSTR);
    175e:	ad e2       	ldi	r26, 0x2D	; 45
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	ed e2       	ldi	r30, 0x2D	; 45
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8f 7e       	andi	r24, 0xEF	; 239
    176a:	8c 93       	st	X, r24


#if 	INTERRUPT_MODE == ENABLE_INTERRUPT
	Set_Bit(SPCR, SPCR_SPIE);
    176c:	ad e2       	ldi	r26, 0x2D	; 45
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	ed e2       	ldi	r30, 0x2D	; 45
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	80 68       	ori	r24, 0x80	; 128
    1778:	8c 93       	st	X, r24
#else
#endif


#if 	DATA_ORDER == LSB_FIRST
	Set_Bit(SPCR, SPCR_DORD);
    177a:	ad e2       	ldi	r26, 0x2D	; 45
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	ed e2       	ldi	r30, 0x2D	; 45
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	80 62       	ori	r24, 0x20	; 32
    1786:	8c 93       	st	X, r24
#else
#endif


	/* SPI Enable */
	Set_Bit(SPCR,SPCR_SPE);
    1788:	ad e2       	ldi	r26, 0x2D	; 45
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	ed e2       	ldi	r30, 0x2D	; 45
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	80 64       	ori	r24, 0x40	; 64
    1794:	8c 93       	st	X, r24
}
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <SPI_u8TransReceive>:

u8 SPI_u8TransReceive( u8 Copy_u8Data )
{
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	0f 92       	push	r0
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	89 83       	std	Y+1, r24	; 0x01
	/* Send Data */
	SPDR = Copy_u8Data;
    17a8:	ef e2       	ldi	r30, 0x2F	; 47
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	80 83       	st	Z, r24

	/* Wait until transfer complete */
	while( Get_Bit(SPSR, SPSR_SPIF) == 0 );
    17b0:	ee e2       	ldi	r30, 0x2E	; 46
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	88 23       	and	r24, r24
    17b8:	dc f7       	brge	.-10     	; 0x17b0 <SPI_u8TransReceive+0x14>

	return SPDR;
    17ba:	ef e2       	ldi	r30, 0x2F	; 47
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
}
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <SPI_u8Receieve>:


u8 SPI_u8Receieve()
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
    17d0:	ef e2       	ldi	r30, 0x2F	; 47
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
}
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <SPI_voidTransmit>:

void SPI_voidTransmit(u8 Copy_u8Data)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	0f 92       	push	r0
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    17e8:	ef e2       	ldi	r30, 0x2F	; 47
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	80 83       	st	Z, r24
}
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <SPI_voidCallBack>:


void SPI_voidCallBack( void (*Ptr)(void) )
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <SPI_voidCallBack+0x6>
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	89 83       	std	Y+1, r24	; 0x01
	if (Ptr != NULL)
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	31 f0       	breq	.+12     	; 0x181a <SPI_voidCallBack+0x22>
	{
		Private_voidSPIFunc = Ptr;
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	90 93 9f 01 	sts	0x019F, r25
    1816:	80 93 9e 01 	sts	0x019E, r24
	}
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <__vector_12>:


void __vector_12(void)__attribute__((signal,used,externally_visible));
void __vector_12(void)
{
    1824:	1f 92       	push	r1
    1826:	0f 92       	push	r0
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	0f 92       	push	r0
    182c:	11 24       	eor	r1, r1
    182e:	2f 93       	push	r18
    1830:	3f 93       	push	r19
    1832:	4f 93       	push	r20
    1834:	5f 93       	push	r21
    1836:	6f 93       	push	r22
    1838:	7f 93       	push	r23
    183a:	8f 93       	push	r24
    183c:	9f 93       	push	r25
    183e:	af 93       	push	r26
    1840:	bf 93       	push	r27
    1842:	ef 93       	push	r30
    1844:	ff 93       	push	r31
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
	if( Private_voidSPIFunc != NULL )
    184e:	80 91 9e 01 	lds	r24, 0x019E
    1852:	90 91 9f 01 	lds	r25, 0x019F
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	29 f0       	breq	.+10     	; 0x1864 <__vector_12+0x40>
	{
		Private_voidSPIFunc();
    185a:	e0 91 9e 01 	lds	r30, 0x019E
    185e:	f0 91 9f 01 	lds	r31, 0x019F
    1862:	09 95       	icall
	}
}
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	7f 91       	pop	r23
    1876:	6f 91       	pop	r22
    1878:	5f 91       	pop	r21
    187a:	4f 91       	pop	r20
    187c:	3f 91       	pop	r19
    187e:	2f 91       	pop	r18
    1880:	0f 90       	pop	r0
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	0f 90       	pop	r0
    1886:	1f 90       	pop	r1
    1888:	18 95       	reti

0000188a <PORT_voidInit>:
#include "Port_Interface.h"
#include "Port_Register.h"


void PORT_voidInit(void)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR ;
    1892:	ea e3       	ldi	r30, 0x3A	; 58
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8e ef       	ldi	r24, 0xFE	; 254
    1898:	80 83       	st	Z, r24
    DDRB = PORTB_DIR ;
    189a:	e7 e3       	ldi	r30, 0x37	; 55
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	8f e4       	ldi	r24, 0x4F	; 79
    18a0:	80 83       	st	Z, r24
    DDRC = PORTC_DIR ;
    18a2:	e4 e3       	ldi	r30, 0x34	; 52
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	83 ef       	ldi	r24, 0xF3	; 243
    18a8:	80 83       	st	Z, r24
    DDRD = PORTD_DIR ;
    18aa:	e1 e3       	ldi	r30, 0x31	; 49
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	8e ef       	ldi	r24, 0xFE	; 254
    18b0:	80 83       	st	Z, r24

    PORTA = PORTA_INIT_VALUE;
    18b2:	eb e3       	ldi	r30, 0x3B	; 59
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	10 82       	st	Z, r1
    PORTB = PORTB_INIT_VALUE;
    18b8:	e8 e3       	ldi	r30, 0x38	; 56
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	10 82       	st	Z, r1
    PORTC = PORTC_INIT_VALUE;
    18be:	e5 e3       	ldi	r30, 0x35	; 53
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	8f ef       	ldi	r24, 0xFF	; 255
    18c4:	80 83       	st	Z, r24
    PORTD = PORTD_INIT_VALUE;
    18c6:	e2 e3       	ldi	r30, 0x32	; 50
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	10 82       	st	Z, r1


}
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <GIE_voidEnable>:

#include "GIE_Register.h"
#include "GIE_Interface.h"

void GIE_voidEnable(void)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt  */
	Set_Bit(SREG, SREG_I);
    18da:	af e5       	ldi	r26, 0x5F	; 95
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ef e5       	ldi	r30, 0x5F	; 95
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	80 68       	ori	r24, 0x80	; 128
    18e6:	8c 93       	st	X, r24
}
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
	/* Disable Global Interrupt  */
	Clear_Bit(SREG, SREG_I);
    18f6:	af e5       	ldi	r26, 0x5F	; 95
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	ef e5       	ldi	r30, 0x5F	; 95
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	8f 77       	andi	r24, 0x7F	; 127
    1902:	8c 93       	st	X, r24
}
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <EXTI0_voidInit>:
void (*EXTI_pvINT1Func)(void) = NULL;
void (*EXTI_pvINT2Func)(void) = NULL;


void EXTI0_voidInit(void)
{
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
#if		SELECT_INT0_SENSE_CONTROL == FALLING_EADGE
	/* ISC01 -> 1, ISC00 -> 0  */
	Set_Bit(MCUCR, MCUCR_ISC01);
    1912:	a5 e5       	ldi	r26, 0x55	; 85
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e5 e5       	ldi	r30, 0x55	; 85
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	82 60       	ori	r24, 0x02	; 2
    191e:	8c 93       	st	X, r24
	Clear_Bit(MCUCR, MCUCR_ISC00);
    1920:	a5 e5       	ldi	r26, 0x55	; 85
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e5 e5       	ldi	r30, 0x55	; 85
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8e 7f       	andi	r24, 0xFE	; 254
    192c:	8c 93       	st	X, r24
	Set_Bit(MCUCR, MCUCR_ISC00);
	Clear_Bit(MCUCR, MCUCR_ISC01);
#else
#error "WRONG SENCE CONTROL"
#endif
}
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	08 95       	ret

00001934 <EXTI0_voidEnable>:

void EXTI0_voidEnable(void)
{
    1934:	df 93       	push	r29
    1936:	cf 93       	push	r28
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT0);
    193c:	ab e5       	ldi	r26, 0x5B	; 91
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	eb e5       	ldi	r30, 0x5B	; 91
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 64       	ori	r24, 0x40	; 64
    1948:	8c 93       	st	X, r24
}
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <EXTI0_voidDisable>:

void EXTI0_voidDisable(void)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT0);
    1958:	ab e5       	ldi	r26, 0x5B	; 91
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	eb e5       	ldi	r30, 0x5B	; 91
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	8f 7b       	andi	r24, 0xBF	; 191
    1964:	8c 93       	st	X, r24
}
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <EXT0_voidSetSignalch>:

void EXT0_voidSetSignalch(u8 SenseCpy)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	00 d0       	rcall	.+0      	; 0x1972 <EXT0_voidSetSignalch+0x6>
    1972:	0f 92       	push	r0
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	89 83       	std	Y+1, r24	; 0x01
	switch( SenseCpy )
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	3b 83       	std	Y+3, r19	; 0x03
    1982:	2a 83       	std	Y+2, r18	; 0x02
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	9b 81       	ldd	r25, Y+3	; 0x03
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	91 05       	cpc	r25, r1
    198c:	99 f1       	breq	.+102    	; 0x19f4 <EXT0_voidSetSignalch+0x88>
    198e:	2a 81       	ldd	r18, Y+2	; 0x02
    1990:	3b 81       	ldd	r19, Y+3	; 0x03
    1992:	23 30       	cpi	r18, 0x03	; 3
    1994:	31 05       	cpc	r19, r1
    1996:	34 f4       	brge	.+12     	; 0x19a4 <EXT0_voidSetSignalch+0x38>
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	9b 81       	ldd	r25, Y+3	; 0x03
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	91 05       	cpc	r25, r1
    19a0:	c1 f1       	breq	.+112    	; 0x1a12 <EXT0_voidSetSignalch+0xa6>
    19a2:	45 c0       	rjmp	.+138    	; 0x1a2e <EXT0_voidSetSignalch+0xc2>
    19a4:	2a 81       	ldd	r18, Y+2	; 0x02
    19a6:	3b 81       	ldd	r19, Y+3	; 0x03
    19a8:	23 30       	cpi	r18, 0x03	; 3
    19aa:	31 05       	cpc	r19, r1
    19ac:	a1 f0       	breq	.+40     	; 0x19d6 <EXT0_voidSetSignalch+0x6a>
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	9b 81       	ldd	r25, Y+3	; 0x03
    19b2:	84 30       	cpi	r24, 0x04	; 4
    19b4:	91 05       	cpc	r25, r1
    19b6:	d9 f5       	brne	.+118    	; 0x1a2e <EXT0_voidSetSignalch+0xc2>
	{
	case FALLING_EADGE:
		/* ISC01 -> 1, ISC00 -> 0  */
		Set_Bit(MCUCR, MCUCR_ISC01);
    19b8:	a5 e5       	ldi	r26, 0x55	; 85
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e5 e5       	ldi	r30, 0x55	; 85
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	82 60       	ori	r24, 0x02	; 2
    19c4:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC00);
    19c6:	a5 e5       	ldi	r26, 0x55	; 85
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e5       	ldi	r30, 0x55	; 85
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8e 7f       	andi	r24, 0xFE	; 254
    19d2:	8c 93       	st	X, r24
    19d4:	2c c0       	rjmp	.+88     	; 0x1a2e <EXT0_voidSetSignalch+0xc2>
		break;
	case RISING_EADGE:
		/* ISC01 -> 1, ISC00 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC01);
    19d6:	a5 e5       	ldi	r26, 0x55	; 85
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e5 e5       	ldi	r30, 0x55	; 85
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	82 60       	ori	r24, 0x02	; 2
    19e2:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC00);
    19e4:	a5 e5       	ldi	r26, 0x55	; 85
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e5       	ldi	r30, 0x55	; 85
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	81 60       	ori	r24, 0x01	; 1
    19f0:	8c 93       	st	X, r24
    19f2:	1d c0       	rjmp	.+58     	; 0x1a2e <EXT0_voidSetSignalch+0xc2>
		break;
	case LOW_LEVEL:
		/* ISC01 -> 0, ISC00 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC01);
    19f4:	a5 e5       	ldi	r26, 0x55	; 85
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e5 e5       	ldi	r30, 0x55	; 85
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	8d 7f       	andi	r24, 0xFD	; 253
    1a00:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC00);
    1a02:	a5 e5       	ldi	r26, 0x55	; 85
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e5 e5       	ldi	r30, 0x55	; 85
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	8e 7f       	andi	r24, 0xFE	; 254
    1a0e:	8c 93       	st	X, r24
    1a10:	0e c0       	rjmp	.+28     	; 0x1a2e <EXT0_voidSetSignalch+0xc2>

		break;
	case ON_CHANGE:
		/* ISC01 -> 0, ISC00 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC00);
    1a12:	a5 e5       	ldi	r26, 0x55	; 85
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e5 e5       	ldi	r30, 0x55	; 85
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	81 60       	ori	r24, 0x01	; 1
    1a1e:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC01);
    1a20:	a5 e5       	ldi	r26, 0x55	; 85
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e5 e5       	ldi	r30, 0x55	; 85
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	8d 7f       	andi	r24, 0xFD	; 253
    1a2c:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <EXTI1_voidInit>:

void EXTI1_voidInit(void)
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
#if		SELECT_INT1_SENSE_CONTROL == FALLING_EADGE
	/* ISC11 -> 1, ISC10 -> 0  */
	Clear_Bit(MCUCR, MCUCR_ISC10);
    1a42:	a5 e5       	ldi	r26, 0x55	; 85
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e5 e5       	ldi	r30, 0x55	; 85
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8b 7f       	andi	r24, 0xFB	; 251
    1a4e:	8c 93       	st	X, r24
	Set_Bit(MCUCR, MCUCR_ISC11);
    1a50:	a5 e5       	ldi	r26, 0x55	; 85
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e5 e5       	ldi	r30, 0x55	; 85
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	88 60       	ori	r24, 0x08	; 8
    1a5c:	8c 93       	st	X, r24
	Clear_Bit(MCUCR, MCUCR_ISC11);
	Set_Bit(MCUCR, MCUCR_ISC10);

#error "WRONG SENCE CONTROL"
#endif
}
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <EXTI1_voidEnable>:

void EXTI1_voidEnable(void)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT1);
    1a6c:	ab e5       	ldi	r26, 0x5B	; 91
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	eb e5       	ldi	r30, 0x5B	; 91
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	80 68       	ori	r24, 0x80	; 128
    1a78:	8c 93       	st	X, r24
}
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <EXTI1_voidDisable>:

void EXTI1_voidDisable(void)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT1);
    1a88:	ab e5       	ldi	r26, 0x5B	; 91
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	eb e5       	ldi	r30, 0x5B	; 91
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	8f 77       	andi	r24, 0x7F	; 127
    1a94:	8c 93       	st	X, r24
}
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <EXT1_voidSetSignalch>:

void EXT1_voidSetSignalch(u8 SenseCpy)
{
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <EXT1_voidSetSignalch+0x6>
    1aa2:	0f 92       	push	r0
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	89 83       	std	Y+1, r24	; 0x01

	switch (SenseCpy)
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	3b 83       	std	Y+3, r19	; 0x03
    1ab2:	2a 83       	std	Y+2, r18	; 0x02
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab8:	82 30       	cpi	r24, 0x02	; 2
    1aba:	91 05       	cpc	r25, r1
    1abc:	99 f1       	breq	.+102    	; 0x1b24 <EXT1_voidSetSignalch+0x88>
    1abe:	2a 81       	ldd	r18, Y+2	; 0x02
    1ac0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ac2:	23 30       	cpi	r18, 0x03	; 3
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	34 f4       	brge	.+12     	; 0x1ad4 <EXT1_voidSetSignalch+0x38>
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	9b 81       	ldd	r25, Y+3	; 0x03
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	91 05       	cpc	r25, r1
    1ad0:	c1 f1       	breq	.+112    	; 0x1b42 <EXT1_voidSetSignalch+0xa6>
    1ad2:	45 c0       	rjmp	.+138    	; 0x1b5e <EXT1_voidSetSignalch+0xc2>
    1ad4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ad6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ad8:	23 30       	cpi	r18, 0x03	; 3
    1ada:	31 05       	cpc	r19, r1
    1adc:	a1 f0       	breq	.+40     	; 0x1b06 <EXT1_voidSetSignalch+0x6a>
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae2:	84 30       	cpi	r24, 0x04	; 4
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	d9 f5       	brne	.+118    	; 0x1b5e <EXT1_voidSetSignalch+0xc2>
	{
	case FALLING_EADGE:
		/* ISC11 -> 1, ISC10 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC10);
    1ae8:	a5 e5       	ldi	r26, 0x55	; 85
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e5 e5       	ldi	r30, 0x55	; 85
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	8b 7f       	andi	r24, 0xFB	; 251
    1af4:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC11);
    1af6:	a5 e5       	ldi	r26, 0x55	; 85
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e5 e5       	ldi	r30, 0x55	; 85
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	88 60       	ori	r24, 0x08	; 8
    1b02:	8c 93       	st	X, r24
    1b04:	2c c0       	rjmp	.+88     	; 0x1b5e <EXT1_voidSetSignalch+0xc2>
		break;
	case RISING_EADGE:
		/* ISC11 -> 1, ISC10 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC10);
    1b06:	a5 e5       	ldi	r26, 0x55	; 85
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e5 e5       	ldi	r30, 0x55	; 85
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	84 60       	ori	r24, 0x04	; 4
    1b12:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC11);
    1b14:	a5 e5       	ldi	r26, 0x55	; 85
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e5 e5       	ldi	r30, 0x55	; 85
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	88 60       	ori	r24, 0x08	; 8
    1b20:	8c 93       	st	X, r24
    1b22:	1d c0       	rjmp	.+58     	; 0x1b5e <EXT1_voidSetSignalch+0xc2>
		break;
	case LOW_LEVEL:
		/* ISC11 -> 0, ISC10 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC10);
    1b24:	a5 e5       	ldi	r26, 0x55	; 85
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e5 e5       	ldi	r30, 0x55	; 85
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8b 7f       	andi	r24, 0xFB	; 251
    1b30:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC11);
    1b32:	a5 e5       	ldi	r26, 0x55	; 85
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e5 e5       	ldi	r30, 0x55	; 85
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	87 7f       	andi	r24, 0xF7	; 247
    1b3e:	8c 93       	st	X, r24
    1b40:	0e c0       	rjmp	.+28     	; 0x1b5e <EXT1_voidSetSignalch+0xc2>
		break;
	case ON_CHANGE:
		/* ISC11 -> 1, ISC10 -> 1  */
		Clear_Bit(MCUCR, MCUCR_ISC11);
    1b42:	a5 e5       	ldi	r26, 0x55	; 85
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e5 e5       	ldi	r30, 0x55	; 85
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	87 7f       	andi	r24, 0xF7	; 247
    1b4e:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC10);
    1b50:	a5 e5       	ldi	r26, 0x55	; 85
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e5 e5       	ldi	r30, 0x55	; 85
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	84 60       	ori	r24, 0x04	; 4
    1b5c:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <EXTI2_voidInit>:


// INTERRUPT 1
void EXTI2_voidInit(void)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62

#if 	SELECT_INT2_SENSE_CONTROL == FALLING_EADGE
	Clear_Bit(MCUCR, MCUCSR_ISC2);
    1b72:	a5 e5       	ldi	r26, 0x55	; 85
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e5 e5       	ldi	r30, 0x55	; 85
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	8f 7b       	andi	r24, 0xBF	; 191
    1b7e:	8c 93       	st	X, r24
#elif 	SELECT_INT2_SENSE_CONTROL == RISING_EADGE
	Set_Bit(MCUCR, MCUCSR_ISC2);
#else
#endif

}
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <EXTI2_voidEnable>:

//enable EXTI
void EXTI2_voidEnable(void)
{
    1b86:	df 93       	push	r29
    1b88:	cf 93       	push	r28
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT2);
    1b8e:	ab e5       	ldi	r26, 0x5B	; 91
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	eb e5       	ldi	r30, 0x5B	; 91
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	80 62       	ori	r24, 0x20	; 32
    1b9a:	8c 93       	st	X, r24
}
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <EXTI2_voidDisable>:

//disable EXTI
void EXTI2_voidDisable(void)
{
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT2);
    1baa:	ab e5       	ldi	r26, 0x5B	; 91
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb e5       	ldi	r30, 0x5B	; 91
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8f 7d       	andi	r24, 0xDF	; 223
    1bb6:	8c 93       	st	X, r24
}
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <EXT2_voidSetSignalch>:

//change the INT with sensing mood in runtime
void EXT2_voidSetSignalch(u8 SenseCpy)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <EXT2_voidSetSignalch+0x6>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy)
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3b 83       	std	Y+3, r19	; 0x03
    1bd4:	2a 83       	std	Y+2, r18	; 0x02
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	91 05       	cpc	r25, r1
    1bde:	69 f0       	breq	.+26     	; 0x1bfa <EXT2_voidSetSignalch+0x3c>
    1be0:	2a 81       	ldd	r18, Y+2	; 0x02
    1be2:	3b 81       	ldd	r19, Y+3	; 0x03
    1be4:	24 30       	cpi	r18, 0x04	; 4
    1be6:	31 05       	cpc	r19, r1
    1be8:	79 f4       	brne	.+30     	; 0x1c08 <EXT2_voidSetSignalch+0x4a>
	{
	case FALLING_EADGE:
		Clear_Bit(MCUCR, MCUCSR_ISC2);
    1bea:	a5 e5       	ldi	r26, 0x55	; 85
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e5 e5       	ldi	r30, 0x55	; 85
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	8f 7b       	andi	r24, 0xBF	; 191
    1bf6:	8c 93       	st	X, r24
    1bf8:	07 c0       	rjmp	.+14     	; 0x1c08 <EXT2_voidSetSignalch+0x4a>
		break;
	case RISING_EADGE:
		Set_Bit(MCUCR, MCUCSR_ISC2);
    1bfa:	a5 e5       	ldi	r26, 0x55	; 85
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e5 e5       	ldi	r30, 0x55	; 85
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	80 64       	ori	r24, 0x40	; 64
    1c06:	8c 93       	st	X, r24
		break;

	}
}
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <EXT0_VID_SET_CALL_BACK>:



//callback function
void EXT0_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <EXT0_VID_SET_CALL_BACK+0x6>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	31 f0       	breq	.+12     	; 0x1c36 <EXT0_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT0Func = PTR;
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	90 93 a1 01 	sts	0x01A1, r25
    1c32:	80 93 a0 01 	sts	0x01A0, r24
	}
	else
	{

	}
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <EXT1_VID_SET_CALL_BACK>:
void EXT1_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <EXT1_VID_SET_CALL_BACK+0x6>
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	31 f0       	breq	.+12     	; 0x1c62 <EXT1_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT1Func = PTR;
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	90 93 a3 01 	sts	0x01A3, r25
    1c5e:	80 93 a2 01 	sts	0x01A2, r24
	}
	else
	{

	}
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <EXT2_VID_SET_CALL_BACK>:
void EXT2_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <EXT2_VID_SET_CALL_BACK+0x6>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	31 f0       	breq	.+12     	; 0x1c8e <EXT2_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT2Func = PTR;
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	90 93 a5 01 	sts	0x01A5, r25
    1c8a:	80 93 a4 01 	sts	0x01A4, r24
	}
	else
	{

	}
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <__vector_1>:



void __vector_1(void)__attribute__((signal,used, externally_visible));
void __vector_1(void)
{
    1c98:	1f 92       	push	r1
    1c9a:	0f 92       	push	r0
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	0f 92       	push	r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	2f 93       	push	r18
    1ca4:	3f 93       	push	r19
    1ca6:	4f 93       	push	r20
    1ca8:	5f 93       	push	r21
    1caa:	6f 93       	push	r22
    1cac:	7f 93       	push	r23
    1cae:	8f 93       	push	r24
    1cb0:	9f 93       	push	r25
    1cb2:	af 93       	push	r26
    1cb4:	bf 93       	push	r27
    1cb6:	ef 93       	push	r30
    1cb8:	ff 93       	push	r31
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT0Func != NULL)
    1cc2:	80 91 a0 01 	lds	r24, 0x01A0
    1cc6:	90 91 a1 01 	lds	r25, 0x01A1
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	29 f0       	breq	.+10     	; 0x1cd8 <__vector_1+0x40>
	{
		EXTI_pvINT0Func();
    1cce:	e0 91 a0 01 	lds	r30, 0x01A0
    1cd2:	f0 91 a1 01 	lds	r31, 0x01A1
    1cd6:	09 95       	icall
	}
}
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	ff 91       	pop	r31
    1cde:	ef 91       	pop	r30
    1ce0:	bf 91       	pop	r27
    1ce2:	af 91       	pop	r26
    1ce4:	9f 91       	pop	r25
    1ce6:	8f 91       	pop	r24
    1ce8:	7f 91       	pop	r23
    1cea:	6f 91       	pop	r22
    1cec:	5f 91       	pop	r21
    1cee:	4f 91       	pop	r20
    1cf0:	3f 91       	pop	r19
    1cf2:	2f 91       	pop	r18
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	0f 90       	pop	r0
    1cfa:	1f 90       	pop	r1
    1cfc:	18 95       	reti

00001cfe <__vector_2>:

void __vector_2(void)__attribute__((signal,used, externally_visible));
void __vector_2(void)
{
    1cfe:	1f 92       	push	r1
    1d00:	0f 92       	push	r0
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	0f 92       	push	r0
    1d06:	11 24       	eor	r1, r1
    1d08:	2f 93       	push	r18
    1d0a:	3f 93       	push	r19
    1d0c:	4f 93       	push	r20
    1d0e:	5f 93       	push	r21
    1d10:	6f 93       	push	r22
    1d12:	7f 93       	push	r23
    1d14:	8f 93       	push	r24
    1d16:	9f 93       	push	r25
    1d18:	af 93       	push	r26
    1d1a:	bf 93       	push	r27
    1d1c:	ef 93       	push	r30
    1d1e:	ff 93       	push	r31
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT1Func != NULL)
    1d28:	80 91 a2 01 	lds	r24, 0x01A2
    1d2c:	90 91 a3 01 	lds	r25, 0x01A3
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	29 f0       	breq	.+10     	; 0x1d3e <__vector_2+0x40>
	{
		EXTI_pvINT1Func();
    1d34:	e0 91 a2 01 	lds	r30, 0x01A2
    1d38:	f0 91 a3 01 	lds	r31, 0x01A3
    1d3c:	09 95       	icall
	}
}
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	ff 91       	pop	r31
    1d44:	ef 91       	pop	r30
    1d46:	bf 91       	pop	r27
    1d48:	af 91       	pop	r26
    1d4a:	9f 91       	pop	r25
    1d4c:	8f 91       	pop	r24
    1d4e:	7f 91       	pop	r23
    1d50:	6f 91       	pop	r22
    1d52:	5f 91       	pop	r21
    1d54:	4f 91       	pop	r20
    1d56:	3f 91       	pop	r19
    1d58:	2f 91       	pop	r18
    1d5a:	0f 90       	pop	r0
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	0f 90       	pop	r0
    1d60:	1f 90       	pop	r1
    1d62:	18 95       	reti

00001d64 <__vector_3>:

void __vector_3(void)__attribute__((signal,used, externally_visible));
void __vector_3(void)
{
    1d64:	1f 92       	push	r1
    1d66:	0f 92       	push	r0
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	0f 92       	push	r0
    1d6c:	11 24       	eor	r1, r1
    1d6e:	2f 93       	push	r18
    1d70:	3f 93       	push	r19
    1d72:	4f 93       	push	r20
    1d74:	5f 93       	push	r21
    1d76:	6f 93       	push	r22
    1d78:	7f 93       	push	r23
    1d7a:	8f 93       	push	r24
    1d7c:	9f 93       	push	r25
    1d7e:	af 93       	push	r26
    1d80:	bf 93       	push	r27
    1d82:	ef 93       	push	r30
    1d84:	ff 93       	push	r31
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT2Func != NULL)
    1d8e:	80 91 a4 01 	lds	r24, 0x01A4
    1d92:	90 91 a5 01 	lds	r25, 0x01A5
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	29 f0       	breq	.+10     	; 0x1da4 <__vector_3+0x40>
	{
		EXTI_pvINT2Func();
    1d9a:	e0 91 a4 01 	lds	r30, 0x01A4
    1d9e:	f0 91 a5 01 	lds	r31, 0x01A5
    1da2:	09 95       	icall
	}
}
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	ff 91       	pop	r31
    1daa:	ef 91       	pop	r30
    1dac:	bf 91       	pop	r27
    1dae:	af 91       	pop	r26
    1db0:	9f 91       	pop	r25
    1db2:	8f 91       	pop	r24
    1db4:	7f 91       	pop	r23
    1db6:	6f 91       	pop	r22
    1db8:	5f 91       	pop	r21
    1dba:	4f 91       	pop	r20
    1dbc:	3f 91       	pop	r19
    1dbe:	2f 91       	pop	r18
    1dc0:	0f 90       	pop	r0
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	0f 90       	pop	r0
    1dc6:	1f 90       	pop	r1
    1dc8:	18 95       	reti

00001dca <DIO_u8SetPinValue>:
}
*/

// Set "Pin" Value
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1dca:	df 93       	push	r29
    1dcc:	cf 93       	push	r28
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <DIO_u8SetPinValue+0x6>
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <DIO_u8SetPinValue+0x8>
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <DIO_u8SetPinValue+0xa>
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	8a 83       	std	Y+2, r24	; 0x02
    1dda:	6b 83       	std	Y+3, r22	; 0x03
    1ddc:	4c 83       	std	Y+4, r20	; 0x04
    u8 ERROR_FLAG = 0;
    1dde:	19 82       	std	Y+1, r1	; 0x01

    switch (Copy_u8Port)
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	3e 83       	std	Y+6, r19	; 0x06
    1de8:	2d 83       	std	Y+5, r18	; 0x05
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	91 05       	cpc	r25, r1
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <DIO_u8SetPinValue+0x2c>
    1df4:	49 c0       	rjmp	.+146    	; 0x1e88 <DIO_u8SetPinValue+0xbe>
    1df6:	2d 81       	ldd	r18, Y+5	; 0x05
    1df8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <DIO_u8SetPinValue+0x40>
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	71 f0       	breq	.+28     	; 0x1e24 <DIO_u8SetPinValue+0x5a>
    1e08:	d4 c0       	rjmp	.+424    	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
    1e0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e0e:	22 30       	cpi	r18, 0x02	; 2
    1e10:	31 05       	cpc	r19, r1
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <DIO_u8SetPinValue+0x4c>
    1e14:	6b c0       	rjmp	.+214    	; 0x1eec <DIO_u8SetPinValue+0x122>
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	83 30       	cpi	r24, 0x03	; 3
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <DIO_u8SetPinValue+0x58>
    1e20:	97 c0       	rjmp	.+302    	; 0x1f50 <DIO_u8SetPinValue+0x186>
    1e22:	c7 c0       	rjmp	.+398    	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
    {
    case DIO_u8PORTA:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    1e24:	8c 81       	ldd	r24, Y+4	; 0x04
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	a1 f4       	brne	.+40     	; 0x1e52 <DIO_u8SetPinValue+0x88>
            Set_Bit(PORTA, Copy_u8Pin);
    1e2a:	ab e3       	ldi	r26, 0x3B	; 59
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	eb e3       	ldi	r30, 0x3B	; 59
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	48 2f       	mov	r20, r24
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 2e       	mov	r0, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <DIO_u8SetPinValue+0x7e>
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	0a 94       	dec	r0
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <DIO_u8SetPinValue+0x7a>
    1e4c:	84 2b       	or	r24, r20
    1e4e:	8c 93       	st	X, r24
    1e50:	b0 c0       	rjmp	.+352    	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    1e52:	8c 81       	ldd	r24, Y+4	; 0x04
    1e54:	88 23       	and	r24, r24
    1e56:	a9 f4       	brne	.+42     	; 0x1e82 <DIO_u8SetPinValue+0xb8>
            Clear_Bit(PORTA, Copy_u8Pin);
    1e58:	ab e3       	ldi	r26, 0x3B	; 59
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	eb e3       	ldi	r30, 0x3B	; 59
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <DIO_u8SetPinValue+0xac>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <DIO_u8SetPinValue+0xa8>
    1e7a:	80 95       	com	r24
    1e7c:	84 23       	and	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	98 c0       	rjmp	.+304    	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	95 c0       	rjmp	.+298    	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTB:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	a1 f4       	brne	.+40     	; 0x1eb6 <DIO_u8SetPinValue+0xec>
            Set_Bit(PORTB, Copy_u8Pin);
    1e8e:	a8 e3       	ldi	r26, 0x38	; 56
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e8 e3       	ldi	r30, 0x38	; 56
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	48 2f       	mov	r20, r24
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	02 2e       	mov	r0, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_u8SetPinValue+0xe2>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	0a 94       	dec	r0
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_u8SetPinValue+0xde>
    1eb0:	84 2b       	or	r24, r20
    1eb2:	8c 93       	st	X, r24
    1eb4:	7e c0       	rjmp	.+252    	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    1eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb8:	88 23       	and	r24, r24
    1eba:	a9 f4       	brne	.+42     	; 0x1ee6 <DIO_u8SetPinValue+0x11c>
            Clear_Bit(PORTB, Copy_u8Pin);
    1ebc:	a8 e3       	ldi	r26, 0x38	; 56
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e8 e3       	ldi	r30, 0x38	; 56
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	48 2f       	mov	r20, r24
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <DIO_u8SetPinValue+0x110>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <DIO_u8SetPinValue+0x10c>
    1ede:	80 95       	com	r24
    1ee0:	84 23       	and	r24, r20
    1ee2:	8c 93       	st	X, r24
    1ee4:	66 c0       	rjmp	.+204    	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	63 c0       	rjmp	.+198    	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTC:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    1eec:	8c 81       	ldd	r24, Y+4	; 0x04
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	a1 f4       	brne	.+40     	; 0x1f1a <DIO_u8SetPinValue+0x150>
            Set_Bit(PORTC, Copy_u8Pin);
    1ef2:	a5 e3       	ldi	r26, 0x35	; 53
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e5 e3       	ldi	r30, 0x35	; 53
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	48 2f       	mov	r20, r24
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	02 2e       	mov	r0, r18
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <DIO_u8SetPinValue+0x146>
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	0a 94       	dec	r0
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <DIO_u8SetPinValue+0x142>
    1f14:	84 2b       	or	r24, r20
    1f16:	8c 93       	st	X, r24
    1f18:	4c c0       	rjmp	.+152    	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    1f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1c:	88 23       	and	r24, r24
    1f1e:	a9 f4       	brne	.+42     	; 0x1f4a <DIO_u8SetPinValue+0x180>
            Clear_Bit(PORTC, Copy_u8Pin);
    1f20:	a5 e3       	ldi	r26, 0x35	; 53
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e5 e3       	ldi	r30, 0x35	; 53
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	48 2f       	mov	r20, r24
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	02 2e       	mov	r0, r18
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <DIO_u8SetPinValue+0x174>
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	0a 94       	dec	r0
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <DIO_u8SetPinValue+0x170>
    1f42:	80 95       	com	r24
    1f44:	84 23       	and	r24, r20
    1f46:	8c 93       	st	X, r24
    1f48:	34 c0       	rjmp	.+104    	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	31 c0       	rjmp	.+98     	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTD:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	a1 f4       	brne	.+40     	; 0x1f7e <DIO_u8SetPinValue+0x1b4>
            Set_Bit(PORTD, Copy_u8Pin);
    1f56:	a2 e3       	ldi	r26, 0x32	; 50
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e2 e3       	ldi	r30, 0x32	; 50
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	48 2f       	mov	r20, r24
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	02 2e       	mov	r0, r18
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <DIO_u8SetPinValue+0x1aa>
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	0a 94       	dec	r0
    1f76:	e2 f7       	brpl	.-8      	; 0x1f70 <DIO_u8SetPinValue+0x1a6>
    1f78:	84 2b       	or	r24, r20
    1f7a:	8c 93       	st	X, r24
    1f7c:	1a c0       	rjmp	.+52     	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	88 23       	and	r24, r24
    1f82:	a9 f4       	brne	.+42     	; 0x1fae <DIO_u8SetPinValue+0x1e4>
            Clear_Bit(PORTD, Copy_u8Pin);
    1f84:	a2 e3       	ldi	r26, 0x32	; 50
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e2 e3       	ldi	r30, 0x32	; 50
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	48 2f       	mov	r20, r24
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	02 2e       	mov	r0, r18
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <DIO_u8SetPinValue+0x1d8>
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	0a 94       	dec	r0
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <DIO_u8SetPinValue+0x1d4>
    1fa6:	80 95       	com	r24
    1fa8:	84 23       	and	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	89 83       	std	Y+1, r24	; 0x01

    default:
        break;
    }

    return ERROR_FLAG;
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fb4:	26 96       	adiw	r28, 0x06	; 6
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <DIO_u8SetPortValue>:
    return Local_u8Error;
}*/

// Set "Port" Value
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <DIO_u8SetPortValue+0x6>
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <DIO_u8SetPortValue+0x8>
    1fce:	0f 92       	push	r0
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
    1fd6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Error = 0;
    1fd8:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8Port < 4)
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	84 30       	cpi	r24, 0x04	; 4
    1fde:	98 f5       	brcc	.+102    	; 0x2046 <DIO_u8SetPortValue+0x80>
    {
        switch (Copy_u8Port)
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	3d 83       	std	Y+5, r19	; 0x05
    1fe8:	2c 83       	std	Y+4, r18	; 0x04
    1fea:	8c 81       	ldd	r24, Y+4	; 0x04
    1fec:	9d 81       	ldd	r25, Y+5	; 0x05
    1fee:	81 30       	cpi	r24, 0x01	; 1
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	d1 f0       	breq	.+52     	; 0x2028 <DIO_u8SetPortValue+0x62>
    1ff4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff8:	22 30       	cpi	r18, 0x02	; 2
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	2c f4       	brge	.+10     	; 0x2008 <DIO_u8SetPortValue+0x42>
    1ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    2000:	9d 81       	ldd	r25, Y+5	; 0x05
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	61 f0       	breq	.+24     	; 0x201e <DIO_u8SetPortValue+0x58>
    2006:	21 c0       	rjmp	.+66     	; 0x204a <DIO_u8SetPortValue+0x84>
    2008:	2c 81       	ldd	r18, Y+4	; 0x04
    200a:	3d 81       	ldd	r19, Y+5	; 0x05
    200c:	22 30       	cpi	r18, 0x02	; 2
    200e:	31 05       	cpc	r19, r1
    2010:	81 f0       	breq	.+32     	; 0x2032 <DIO_u8SetPortValue+0x6c>
    2012:	8c 81       	ldd	r24, Y+4	; 0x04
    2014:	9d 81       	ldd	r25, Y+5	; 0x05
    2016:	83 30       	cpi	r24, 0x03	; 3
    2018:	91 05       	cpc	r25, r1
    201a:	81 f0       	breq	.+32     	; 0x203c <DIO_u8SetPortValue+0x76>
    201c:	16 c0       	rjmp	.+44     	; 0x204a <DIO_u8SetPortValue+0x84>
        {
        case DIO_u8PORTA:
            PORTA = Copy_u8Value;
    201e:	eb e3       	ldi	r30, 0x3B	; 59
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	80 83       	st	Z, r24
    2026:	11 c0       	rjmp	.+34     	; 0x204a <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTB:
            PORTB = Copy_u8Value;
    2028:	e8 e3       	ldi	r30, 0x38	; 56
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	80 83       	st	Z, r24
    2030:	0c c0       	rjmp	.+24     	; 0x204a <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTC:
            PORTC = Copy_u8Value;
    2032:	e5 e3       	ldi	r30, 0x35	; 53
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	80 83       	st	Z, r24
    203a:	07 c0       	rjmp	.+14     	; 0x204a <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTD:
            PORTD = Copy_u8Value;
    203c:	e2 e3       	ldi	r30, 0x32	; 50
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	80 83       	st	Z, r24
    2044:	02 c0       	rjmp	.+4      	; 0x204a <DIO_u8SetPortValue+0x84>
            break;
        }
    }
    else
    {
        Local_u8Error = 1;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8Error;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <DIO_GetPinValue>:

// Get/Read "Pin" value
u8 DIO_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8Value)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	27 97       	sbiw	r28, 0x07	; 7
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	6a 83       	std	Y+2, r22	; 0x02
    2074:	5c 83       	std	Y+4, r21	; 0x04
    2076:	4b 83       	std	Y+3, r20	; 0x03

    switch (Copy_u8Port)
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	28 2f       	mov	r18, r24
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	3f 83       	std	Y+7, r19	; 0x07
    2080:	2e 83       	std	Y+6, r18	; 0x06
    2082:	4e 81       	ldd	r20, Y+6	; 0x06
    2084:	5f 81       	ldd	r21, Y+7	; 0x07
    2086:	41 30       	cpi	r20, 0x01	; 1
    2088:	51 05       	cpc	r21, r1
    208a:	59 f1       	breq	.+86     	; 0x20e2 <DIO_GetPinValue+0x86>
    208c:	8e 81       	ldd	r24, Y+6	; 0x06
    208e:	9f 81       	ldd	r25, Y+7	; 0x07
    2090:	82 30       	cpi	r24, 0x02	; 2
    2092:	91 05       	cpc	r25, r1
    2094:	34 f4       	brge	.+12     	; 0x20a2 <DIO_GetPinValue+0x46>
    2096:	2e 81       	ldd	r18, Y+6	; 0x06
    2098:	3f 81       	ldd	r19, Y+7	; 0x07
    209a:	21 15       	cp	r18, r1
    209c:	31 05       	cpc	r19, r1
    209e:	69 f0       	breq	.+26     	; 0x20ba <DIO_GetPinValue+0x5e>
    20a0:	5c c0       	rjmp	.+184    	; 0x215a <DIO_GetPinValue+0xfe>
    20a2:	4e 81       	ldd	r20, Y+6	; 0x06
    20a4:	5f 81       	ldd	r21, Y+7	; 0x07
    20a6:	42 30       	cpi	r20, 0x02	; 2
    20a8:	51 05       	cpc	r21, r1
    20aa:	79 f1       	breq	.+94     	; 0x210a <DIO_GetPinValue+0xae>
    20ac:	8e 81       	ldd	r24, Y+6	; 0x06
    20ae:	9f 81       	ldd	r25, Y+7	; 0x07
    20b0:	83 30       	cpi	r24, 0x03	; 3
    20b2:	91 05       	cpc	r25, r1
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <DIO_GetPinValue+0x5c>
    20b6:	3d c0       	rjmp	.+122    	; 0x2132 <DIO_GetPinValue+0xd6>
    20b8:	50 c0       	rjmp	.+160    	; 0x215a <DIO_GetPinValue+0xfe>
    {
    case DIO_u8PORTA:
        *Copy_u8Value = Get_Bit(PINA, Copy_u8Pin);
    20ba:	e9 e3       	ldi	r30, 0x39	; 57
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	88 2f       	mov	r24, r24
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	a9 01       	movw	r20, r18
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <DIO_GetPinValue+0x76>
    20ce:	55 95       	asr	r21
    20d0:	47 95       	ror	r20
    20d2:	8a 95       	dec	r24
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <DIO_GetPinValue+0x72>
    20d6:	ca 01       	movw	r24, r20
    20d8:	81 70       	andi	r24, 0x01	; 1
    20da:	eb 81       	ldd	r30, Y+3	; 0x03
    20dc:	fc 81       	ldd	r31, Y+4	; 0x04
    20de:	80 83       	st	Z, r24
    20e0:	3e c0       	rjmp	.+124    	; 0x215e <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTB:
        *Copy_u8Value = Get_Bit(PINB, Copy_u8Pin);
    20e2:	e6 e3       	ldi	r30, 0x36	; 54
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a9 01       	movw	r20, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <DIO_GetPinValue+0x9e>
    20f6:	55 95       	asr	r21
    20f8:	47 95       	ror	r20
    20fa:	8a 95       	dec	r24
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <DIO_GetPinValue+0x9a>
    20fe:	ca 01       	movw	r24, r20
    2100:	81 70       	andi	r24, 0x01	; 1
    2102:	eb 81       	ldd	r30, Y+3	; 0x03
    2104:	fc 81       	ldd	r31, Y+4	; 0x04
    2106:	80 83       	st	Z, r24
    2108:	2a c0       	rjmp	.+84     	; 0x215e <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTC:
        *Copy_u8Value = Get_Bit(PINC, Copy_u8Pin);
    210a:	e3 e3       	ldi	r30, 0x33	; 51
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	88 2f       	mov	r24, r24
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a9 01       	movw	r20, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <DIO_GetPinValue+0xc6>
    211e:	55 95       	asr	r21
    2120:	47 95       	ror	r20
    2122:	8a 95       	dec	r24
    2124:	e2 f7       	brpl	.-8      	; 0x211e <DIO_GetPinValue+0xc2>
    2126:	ca 01       	movw	r24, r20
    2128:	81 70       	andi	r24, 0x01	; 1
    212a:	eb 81       	ldd	r30, Y+3	; 0x03
    212c:	fc 81       	ldd	r31, Y+4	; 0x04
    212e:	80 83       	st	Z, r24
    2130:	16 c0       	rjmp	.+44     	; 0x215e <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTD:
        *Copy_u8Value = Get_Bit(PIND, Copy_u8Pin);
    2132:	e0 e3       	ldi	r30, 0x30	; 48
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a9 01       	movw	r20, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <DIO_GetPinValue+0xee>
    2146:	55 95       	asr	r21
    2148:	47 95       	ror	r20
    214a:	8a 95       	dec	r24
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <DIO_GetPinValue+0xea>
    214e:	ca 01       	movw	r24, r20
    2150:	81 70       	andi	r24, 0x01	; 1
    2152:	eb 81       	ldd	r30, Y+3	; 0x03
    2154:	fc 81       	ldd	r31, Y+4	; 0x04
    2156:	80 83       	st	Z, r24
    2158:	02 c0       	rjmp	.+4      	; 0x215e <DIO_GetPinValue+0x102>
        break;

    default:
    	return NOK;
    215a:	1d 82       	std	Y+5, r1	; 0x05
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <DIO_GetPinValue+0x106>
        break;
    }

    return OK;
    215e:	51 e0       	ldi	r21, 0x01	; 1
    2160:	5d 83       	std	Y+5, r21	; 0x05
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2164:	27 96       	adiw	r28, 0x07	; 7
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <DIO_voidSetPortValue>:


void DIO_voidSetPortValue( u8 PORT_OUTPUT_VAL )
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	0f 92       	push	r0
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	89 83       	std	Y+1, r24	; 0x01

#if SELECTED_PORT == PORT_u8_A
    PORTA = PORT_OUTPUT_VAL;
    2182:	eb e3       	ldi	r30, 0x3B	; 59
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	80 83       	st	Z, r24
    PORTD = PORT_OUTPUT_VAL;
#else

#endif

}
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <ADC_voidInit>:

void (*ADC_pvFunc)(void);


void ADC_voidInit()
{
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62

#if 	VOLTAGE_REFERENCE == AVCC
	/* REFS1 -> 0, REFS0 -> 1 */
	Set_Bit(ADMUX, ADMUX_REFS0);
    219a:	a7 e2       	ldi	r26, 0x27	; 39
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e7 e2       	ldi	r30, 0x27	; 39
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	80 64       	ori	r24, 0x40	; 64
    21a6:	8c 93       	st	X, r24
	Clear_Bit(ADMUX, ADMUX_REFS1);
    21a8:	a7 e2       	ldi	r26, 0x27	; 39
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e7 e2       	ldi	r30, 0x27	; 39
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	8f 77       	andi	r24, 0x7F	; 127
    21b4:	8c 93       	st	X, r24
	Vref = 5;
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 ea       	ldi	r26, 0xA0	; 160
    21bc:	b0 e4       	ldi	r27, 0x40	; 64
    21be:	80 93 76 01 	sts	0x0176, r24
    21c2:	90 93 77 01 	sts	0x0177, r25
    21c6:	a0 93 78 01 	sts	0x0178, r26
    21ca:	b0 93 79 01 	sts	0x0179, r27
	Clear_Bit(ADCSRA, ADCSRA_ADPS0);
	Set_Bit(ADCSRA, ADCSRA_ADPS1);
	Set_Bit(ADCSRA, ADCSRA_ADPS2);
#elif ADC_PRESCALER_SELECTION == DIVIDE_BY_128
	/* ADPS2 -> 1,  ADPS1 -> 1, ADPS0 -> 1 */
	Set_Bit(ADCSRA, ADCSRA_ADPS0);
    21ce:	a6 e2       	ldi	r26, 0x26	; 38
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e6 e2       	ldi	r30, 0x26	; 38
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	81 60       	ori	r24, 0x01	; 1
    21da:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, ADCSRA_ADPS1);
    21dc:	a6 e2       	ldi	r26, 0x26	; 38
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e6 e2       	ldi	r30, 0x26	; 38
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	82 60       	ori	r24, 0x02	; 2
    21e8:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, ADCSRA_ADPS2);
    21ea:	a6 e2       	ldi	r26, 0x26	; 38
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e6 e2       	ldi	r30, 0x26	; 38
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	84 60       	ori	r24, 0x04	; 4
    21f6:	8c 93       	st	X, r24
#endif

#if		ADJUSTMENT == LEFT_ADJUSTMENT
	Set_Bit(ADMUX, ADMUX_ADLAR);
#elif   ADJUSTMENT == RIGHT_ADJUSTMENT
	Clear_Bit(ADMUX, ADMUX_ADLAR);
    21f8:	a7 e2       	ldi	r26, 0x27	; 39
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e7 e2       	ldi	r30, 0x27	; 39
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	8f 7d       	andi	r24, 0xDF	; 223
    2204:	8c 93       	st	X, r24

#else
#error
#endif

}
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <ADC_voidEnable>:


void ADC_voidEnable()
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA, ADCSRA_ADEN);
    2214:	a6 e2       	ldi	r26, 0x26	; 38
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e6 e2       	ldi	r30, 0x26	; 38
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	80 68       	ori	r24, 0x80	; 128
    2220:	8c 93       	st	X, r24
}
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable()
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA, ADCSRA_ADIE);
    2230:	a6 e2       	ldi	r26, 0x26	; 38
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e6 e2       	ldi	r30, 0x26	; 38
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	88 60       	ori	r24, 0x08	; 8
    223c:	8c 93       	st	X, r24
}
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <ADC_voidDisable>:

void ADC_voidDisable()
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA, ADCSRA_ADEN);
    224c:	a6 e2       	ldi	r26, 0x26	; 38
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e6 e2       	ldi	r30, 0x26	; 38
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	8f 77       	andi	r24, 0x7F	; 127
    2258:	8c 93       	st	X, r24
}
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <ADC_u16ReadADC>:

u16 ADC_u16ReadADC()
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	00 d0       	rcall	.+0      	; 0x2266 <ADC_u16ReadADC+0x6>
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_Result=0;
    226a:	1a 82       	std	Y+2, r1	; 0x02
    226c:	19 82       	std	Y+1, r1	; 0x01

	ADC_Result = ( ADC_10Bit * Vref) / 1024;
    226e:	e4 e2       	ldi	r30, 0x24	; 36
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	cc 01       	movw	r24, r24
    2278:	a0 e0       	ldi	r26, 0x00	; 0
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	20 91 76 01 	lds	r18, 0x0176
    228c:	30 91 77 01 	lds	r19, 0x0177
    2290:	40 91 78 01 	lds	r20, 0x0178
    2294:	50 91 79 01 	lds	r21, 0x0179
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	54 e4       	ldi	r21, 0x44	; 68
    22b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01

	return ADC_Result;
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	9a 81       	ldd	r25, Y+2	; 0x02
}
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 Copy_u8Channel)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	0f 92       	push	r0
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
    22e2:	a7 e2       	ldi	r26, 0x27	; 39
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e7 e2       	ldi	r30, 0x27	; 39
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	80 7e       	andi	r24, 0xE0	; 224
    22ee:	8c 93       	st	X, r24

	ADMUX |= Copy_u8Channel;
    22f0:	a7 e2       	ldi	r26, 0x27	; 39
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	e7 e2       	ldi	r30, 0x27	; 39
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	90 81       	ld	r25, Z
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	89 2b       	or	r24, r25
    22fe:	8c 93       	st	X, r24

	// Start Conversion
	Set_Bit(ADCSRA, ADCSRA_ADSC);
    2300:	a6 e2       	ldi	r26, 0x26	; 38
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e6 e2       	ldi	r30, 0x26	; 38
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	80 64       	ori	r24, 0x40	; 64
    230c:	8c 93       	st	X, r24

	// Polling { Busy Waiting } until conversion complete
	while( Get_Bit(ADCSRA, ADCSRA_ADIF) == 0 );
    230e:	e6 e2       	ldi	r30, 0x26	; 38
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	82 95       	swap	r24
    2316:	8f 70       	andi	r24, 0x0F	; 15
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	81 70       	andi	r24, 0x01	; 1
    231e:	90 70       	andi	r25, 0x00	; 0
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	a9 f3       	breq	.-22     	; 0x230e <ADC_voidStartConversion+0x38>

	// Clear Conversion Flag
	Set_Bit(ADCSRA, ADCSRA_ADIF);
    2324:	a6 e2       	ldi	r26, 0x26	; 38
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e6 e2       	ldi	r30, 0x26	; 38
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	80 61       	ori	r24, 0x10	; 16
    2330:	8c 93       	st	X, r24

}
    2332:	0f 90       	pop	r0
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 Copy_u8Channel)
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	0f 92       	push	r0
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
    2346:	a7 e2       	ldi	r26, 0x27	; 39
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e7 e2       	ldi	r30, 0x27	; 39
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	80 7e       	andi	r24, 0xE0	; 224
    2352:	8c 93       	st	X, r24

	ADMUX |= Copy_u8Channel;
    2354:	a7 e2       	ldi	r26, 0x27	; 39
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e7 e2       	ldi	r30, 0x27	; 39
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	90 81       	ld	r25, Z
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	89 2b       	or	r24, r25
    2362:	8c 93       	st	X, r24

	// Start Conversion
	Set_Bit(ADCSRA, ADCSRA_ADSC);
    2364:	a6 e2       	ldi	r26, 0x26	; 38
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e6 e2       	ldi	r30, 0x26	; 38
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	80 64       	ori	r24, 0x40	; 64
    2370:	8c 93       	st	X, r24

}
    2372:	0f 90       	pop	r0
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <ADC_u16ReadADCInMV>:


u16 ADC_u16ReadADCInMV()
{
    237a:	ef 92       	push	r14
    237c:	ff 92       	push	r15
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <ADC_u16ReadADCInMV+0xe>
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_Result= 0;
    238c:	1a 82       	std	Y+2, r1	; 0x02
    238e:	19 82       	std	Y+1, r1	; 0x01

	ADC_Result = (ADC_10Bit * 1000UL * (u8)Vref) / 1024UL;
    2390:	e4 e2       	ldi	r30, 0x24	; 36
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	91 81       	ldd	r25, Z+1	; 0x01
    2398:	7c 01       	movw	r14, r24
    239a:	00 e0       	ldi	r16, 0x00	; 0
    239c:	10 e0       	ldi	r17, 0x00	; 0
    239e:	80 91 76 01 	lds	r24, 0x0176
    23a2:	90 91 77 01 	lds	r25, 0x0177
    23a6:	a0 91 78 01 	lds	r26, 0x0178
    23aa:	b0 91 79 01 	lds	r27, 0x0179
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	50 e0       	ldi	r21, 0x00	; 0
    23c2:	c8 01       	movw	r24, r16
    23c4:	b7 01       	movw	r22, r14
    23c6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__mulsi3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	28 ee       	ldi	r18, 0xE8	; 232
    23d0:	33 e0       	ldi	r19, 0x03	; 3
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__mulsi3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	07 2e       	mov	r0, r23
    23e4:	7a e0       	ldi	r23, 0x0A	; 10
    23e6:	b6 95       	lsr	r27
    23e8:	a7 95       	ror	r26
    23ea:	97 95       	ror	r25
    23ec:	87 95       	ror	r24
    23ee:	7a 95       	dec	r23
    23f0:	d1 f7       	brne	.-12     	; 0x23e6 <ADC_u16ReadADCInMV+0x6c>
    23f2:	70 2d       	mov	r23, r0
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	89 83       	std	Y+1, r24	; 0x01

	return (u16)ADC_Result;
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	9a 81       	ldd	r25, Y+2	; 0x02

}
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	1f 91       	pop	r17
    2406:	0f 91       	pop	r16
    2408:	ff 90       	pop	r15
    240a:	ef 90       	pop	r14
    240c:	08 95       	ret

0000240e <ADC_voidDisableInt>:

void ADC_voidDisableInt()
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA, ADCSRA_ADIE);
    2416:	a6 e2       	ldi	r26, 0x26	; 38
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e6 e2       	ldi	r30, 0x26	; 38
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	87 7f       	andi	r24, 0xF7	; 247
    2422:	8c 93       	st	X, r24
}
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <ADC_SetCallback>:

void ADC_SetCallback( void (*ptr) (void) )
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	00 d0       	rcall	.+0      	; 0x2430 <ADC_SetCallback+0x6>
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	89 83       	std	Y+1, r24	; 0x01
	if( ptr != NULL )
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	9a 81       	ldd	r25, Y+2	; 0x02
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	31 f0       	breq	.+12     	; 0x244c <ADC_SetCallback+0x22>
	{
		ADC_pvFunc = ptr;
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	90 93 ae 01 	sts	0x01AE, r25
    2448:	80 93 ad 01 	sts	0x01AD, r24
	}
}
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <__vector_16>:


void __vector_16(void)__attribute__((signal,used, externally_visible));
void __vector_16(void)
{
    2456:	1f 92       	push	r1
    2458:	0f 92       	push	r0
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	0f 92       	push	r0
    245e:	11 24       	eor	r1, r1
    2460:	2f 93       	push	r18
    2462:	3f 93       	push	r19
    2464:	4f 93       	push	r20
    2466:	5f 93       	push	r21
    2468:	6f 93       	push	r22
    246a:	7f 93       	push	r23
    246c:	8f 93       	push	r24
    246e:	9f 93       	push	r25
    2470:	af 93       	push	r26
    2472:	bf 93       	push	r27
    2474:	ef 93       	push	r30
    2476:	ff 93       	push	r31
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
	if( ADC_pvFunc != NULL )
    2480:	80 91 ad 01 	lds	r24, 0x01AD
    2484:	90 91 ae 01 	lds	r25, 0x01AE
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	29 f0       	breq	.+10     	; 0x2496 <__vector_16+0x40>
	{
		ADC_pvFunc();
    248c:	e0 91 ad 01 	lds	r30, 0x01AD
    2490:	f0 91 ae 01 	lds	r31, 0x01AE
    2494:	09 95       	icall
	}
}
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	ff 91       	pop	r31
    249c:	ef 91       	pop	r30
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	0f 90       	pop	r0
    24b8:	1f 90       	pop	r1
    24ba:	18 95       	reti

000024bc <LCD_voidInit>:
#include "LCD_Private.h"

#include "avr/delay.h"


void LCD_voidInit(){
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	cc 58       	subi	r28, 0x8C	; 140
    24ca:	d0 40       	sbci	r29, 0x00	; 0
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	fe 01       	movw	r30, r28
    24d8:	e7 57       	subi	r30, 0x77	; 119
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	ac e0       	ldi	r26, 0x0C	; 12
    24e2:	b2 e4       	ldi	r27, 0x42	; 66
    24e4:	80 83       	st	Z, r24
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	a2 83       	std	Z+2, r26	; 0x02
    24ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ec:	8e 01       	movw	r16, r28
    24ee:	0b 57       	subi	r16, 0x7B	; 123
    24f0:	1f 4f       	sbci	r17, 0xFF	; 255
    24f2:	fe 01       	movw	r30, r28
    24f4:	e7 57       	subi	r30, 0x77	; 119
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	4a e7       	ldi	r20, 0x7A	; 122
    2506:	55 e4       	ldi	r21, 0x45	; 69
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	f8 01       	movw	r30, r16
    2512:	80 83       	st	Z, r24
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	a2 83       	std	Z+2, r26	; 0x02
    2518:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    251a:	fe 01       	movw	r30, r28
    251c:	eb 57       	subi	r30, 0x7B	; 123
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	60 81       	ld	r22, Z
    2522:	71 81       	ldd	r23, Z+1	; 0x01
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e8       	ldi	r20, 0x80	; 128
    252e:	5f e3       	ldi	r21, 0x3F	; 63
    2530:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2534:	88 23       	and	r24, r24
    2536:	44 f4       	brge	.+16     	; 0x2548 <LCD_voidInit+0x8c>
		__ticks = 1;
    2538:	fe 01       	movw	r30, r28
    253a:	ed 57       	subi	r30, 0x7D	; 125
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	91 83       	std	Z+1, r25	; 0x01
    2544:	80 83       	st	Z, r24
    2546:	64 c0       	rjmp	.+200    	; 0x2610 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2548:	fe 01       	movw	r30, r28
    254a:	eb 57       	subi	r30, 0x7B	; 123
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	60 81       	ld	r22, Z
    2550:	71 81       	ldd	r23, Z+1	; 0x01
    2552:	82 81       	ldd	r24, Z+2	; 0x02
    2554:	93 81       	ldd	r25, Z+3	; 0x03
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	3f ef       	ldi	r19, 0xFF	; 255
    255a:	4f e7       	ldi	r20, 0x7F	; 127
    255c:	57 e4       	ldi	r21, 0x47	; 71
    255e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2562:	18 16       	cp	r1, r24
    2564:	0c f0       	brlt	.+2      	; 0x2568 <LCD_voidInit+0xac>
    2566:	43 c0       	rjmp	.+134    	; 0x25ee <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2568:	fe 01       	movw	r30, r28
    256a:	e7 57       	subi	r30, 0x77	; 119
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	60 81       	ld	r22, Z
    2570:	71 81       	ldd	r23, Z+1	; 0x01
    2572:	82 81       	ldd	r24, Z+2	; 0x02
    2574:	93 81       	ldd	r25, Z+3	; 0x03
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e2       	ldi	r20, 0x20	; 32
    257c:	51 e4       	ldi	r21, 0x41	; 65
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	8e 01       	movw	r16, r28
    2588:	0d 57       	subi	r16, 0x7D	; 125
    258a:	1f 4f       	sbci	r17, 0xFF	; 255
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	f8 01       	movw	r30, r16
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	80 83       	st	Z, r24
    259e:	1f c0       	rjmp	.+62     	; 0x25de <LCD_voidInit+0x122>
    25a0:	fe 01       	movw	r30, r28
    25a2:	ef 57       	subi	r30, 0x7F	; 127
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 e9       	ldi	r24, 0x90	; 144
    25a8:	91 e0       	ldi	r25, 0x01	; 1
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25ae:	fe 01       	movw	r30, r28
    25b0:	ef 57       	subi	r30, 0x7F	; 127
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	f1 f7       	brne	.-4      	; 0x25b8 <LCD_voidInit+0xfc>
    25bc:	fe 01       	movw	r30, r28
    25be:	ef 57       	subi	r30, 0x7F	; 127
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	de 01       	movw	r26, r28
    25c8:	ad 57       	subi	r26, 0x7D	; 125
    25ca:	bf 4f       	sbci	r27, 0xFF	; 255
    25cc:	fe 01       	movw	r30, r28
    25ce:	ed 57       	subi	r30, 0x7D	; 125
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	11 96       	adiw	r26, 0x01	; 1
    25da:	9c 93       	st	X, r25
    25dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25de:	fe 01       	movw	r30, r28
    25e0:	ed 57       	subi	r30, 0x7D	; 125
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	d1 f6       	brne	.-76     	; 0x25a0 <LCD_voidInit+0xe4>
    25ec:	27 c0       	rjmp	.+78     	; 0x263c <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ee:	8e 01       	movw	r16, r28
    25f0:	0d 57       	subi	r16, 0x7D	; 125
    25f2:	1f 4f       	sbci	r17, 0xFF	; 255
    25f4:	fe 01       	movw	r30, r28
    25f6:	eb 57       	subi	r30, 0x7B	; 123
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	f8 01       	movw	r30, r16
    260c:	91 83       	std	Z+1, r25	; 0x01
    260e:	80 83       	st	Z, r24
    2610:	de 01       	movw	r26, r28
    2612:	a1 58       	subi	r26, 0x81	; 129
    2614:	bf 4f       	sbci	r27, 0xFF	; 255
    2616:	fe 01       	movw	r30, r28
    2618:	ed 57       	subi	r30, 0x7D	; 125
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 81       	ld	r24, Z
    261e:	91 81       	ldd	r25, Z+1	; 0x01
    2620:	8d 93       	st	X+, r24
    2622:	9c 93       	st	X, r25
    2624:	fe 01       	movw	r30, r28
    2626:	e1 58       	subi	r30, 0x81	; 129
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 81       	ld	r24, Z
    262c:	91 81       	ldd	r25, Z+1	; 0x01
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <LCD_voidInit+0x172>
    2632:	fe 01       	movw	r30, r28
    2634:	e1 58       	subi	r30, 0x81	; 129
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    263c:	80 e3       	ldi	r24, 0x30	; 48
    263e:	0e 94 4e 19 	call	0x329c	; 0x329c <LCD_voidSendInitCommand>
    2642:	fe 01       	movw	r30, r28
    2644:	e5 58       	subi	r30, 0x85	; 133
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a0 ea       	ldi	r26, 0xA0	; 160
    264e:	b0 e4       	ldi	r27, 0x40	; 64
    2650:	80 83       	st	Z, r24
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	a2 83       	std	Z+2, r26	; 0x02
    2656:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2658:	8e 01       	movw	r16, r28
    265a:	09 58       	subi	r16, 0x89	; 137
    265c:	1f 4f       	sbci	r17, 0xFF	; 255
    265e:	fe 01       	movw	r30, r28
    2660:	e5 58       	subi	r30, 0x85	; 133
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	60 81       	ld	r22, Z
    2666:	71 81       	ldd	r23, Z+1	; 0x01
    2668:	82 81       	ldd	r24, Z+2	; 0x02
    266a:	93 81       	ldd	r25, Z+3	; 0x03
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	4a e7       	ldi	r20, 0x7A	; 122
    2672:	55 e4       	ldi	r21, 0x45	; 69
    2674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	f8 01       	movw	r30, r16
    267e:	80 83       	st	Z, r24
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	a2 83       	std	Z+2, r26	; 0x02
    2684:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2686:	fe 01       	movw	r30, r28
    2688:	e9 58       	subi	r30, 0x89	; 137
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	60 81       	ld	r22, Z
    268e:	71 81       	ldd	r23, Z+1	; 0x01
    2690:	82 81       	ldd	r24, Z+2	; 0x02
    2692:	93 81       	ldd	r25, Z+3	; 0x03
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e8       	ldi	r20, 0x80	; 128
    269a:	5f e3       	ldi	r21, 0x3F	; 63
    269c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    26a0:	88 23       	and	r24, r24
    26a2:	44 f4       	brge	.+16     	; 0x26b4 <LCD_voidInit+0x1f8>
		__ticks = 1;
    26a4:	fe 01       	movw	r30, r28
    26a6:	eb 58       	subi	r30, 0x8B	; 139
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
    26b2:	64 c0       	rjmp	.+200    	; 0x277c <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    26b4:	fe 01       	movw	r30, r28
    26b6:	e9 58       	subi	r30, 0x89	; 137
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	60 81       	ld	r22, Z
    26bc:	71 81       	ldd	r23, Z+1	; 0x01
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	93 81       	ldd	r25, Z+3	; 0x03
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	3f ef       	ldi	r19, 0xFF	; 255
    26c6:	4f e7       	ldi	r20, 0x7F	; 127
    26c8:	57 e4       	ldi	r21, 0x47	; 71
    26ca:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26ce:	18 16       	cp	r1, r24
    26d0:	0c f0       	brlt	.+2      	; 0x26d4 <LCD_voidInit+0x218>
    26d2:	43 c0       	rjmp	.+134    	; 0x275a <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	fe 01       	movw	r30, r28
    26d6:	e5 58       	subi	r30, 0x85	; 133
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e2       	ldi	r20, 0x20	; 32
    26e8:	51 e4       	ldi	r21, 0x41	; 65
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	8e 01       	movw	r16, r28
    26f4:	0b 58       	subi	r16, 0x8B	; 139
    26f6:	1f 4f       	sbci	r17, 0xFF	; 255
    26f8:	bc 01       	movw	r22, r24
    26fa:	cd 01       	movw	r24, r26
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	f8 01       	movw	r30, r16
    2706:	91 83       	std	Z+1, r25	; 0x01
    2708:	80 83       	st	Z, r24
    270a:	1f c0       	rjmp	.+62     	; 0x274a <LCD_voidInit+0x28e>
    270c:	fe 01       	movw	r30, r28
    270e:	ed 58       	subi	r30, 0x8D	; 141
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 e9       	ldi	r24, 0x90	; 144
    2714:	91 e0       	ldi	r25, 0x01	; 1
    2716:	91 83       	std	Z+1, r25	; 0x01
    2718:	80 83       	st	Z, r24
    271a:	fe 01       	movw	r30, r28
    271c:	ed 58       	subi	r30, 0x8D	; 141
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	80 81       	ld	r24, Z
    2722:	91 81       	ldd	r25, Z+1	; 0x01
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <LCD_voidInit+0x268>
    2728:	fe 01       	movw	r30, r28
    272a:	ed 58       	subi	r30, 0x8D	; 141
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2732:	de 01       	movw	r26, r28
    2734:	ab 58       	subi	r26, 0x8B	; 139
    2736:	bf 4f       	sbci	r27, 0xFF	; 255
    2738:	fe 01       	movw	r30, r28
    273a:	eb 58       	subi	r30, 0x8B	; 139
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	80 81       	ld	r24, Z
    2740:	91 81       	ldd	r25, Z+1	; 0x01
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	11 96       	adiw	r26, 0x01	; 1
    2746:	9c 93       	st	X, r25
    2748:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274a:	fe 01       	movw	r30, r28
    274c:	eb 58       	subi	r30, 0x8B	; 139
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	d1 f6       	brne	.-76     	; 0x270c <LCD_voidInit+0x250>
    2758:	27 c0       	rjmp	.+78     	; 0x27a8 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275a:	8e 01       	movw	r16, r28
    275c:	0b 58       	subi	r16, 0x8B	; 139
    275e:	1f 4f       	sbci	r17, 0xFF	; 255
    2760:	fe 01       	movw	r30, r28
    2762:	e9 58       	subi	r30, 0x89	; 137
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	60 81       	ld	r22, Z
    2768:	71 81       	ldd	r23, Z+1	; 0x01
    276a:	82 81       	ldd	r24, Z+2	; 0x02
    276c:	93 81       	ldd	r25, Z+3	; 0x03
    276e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	f8 01       	movw	r30, r16
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	80 83       	st	Z, r24
    277c:	de 01       	movw	r26, r28
    277e:	af 58       	subi	r26, 0x8F	; 143
    2780:	bf 4f       	sbci	r27, 0xFF	; 255
    2782:	fe 01       	movw	r30, r28
    2784:	eb 58       	subi	r30, 0x8B	; 139
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	80 81       	ld	r24, Z
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	8d 93       	st	X+, r24
    278e:	9c 93       	st	X, r25
    2790:	fe 01       	movw	r30, r28
    2792:	ef 58       	subi	r30, 0x8F	; 143
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	f1 f7       	brne	.-4      	; 0x279a <LCD_voidInit+0x2de>
    279e:	fe 01       	movw	r30, r28
    27a0:	ef 58       	subi	r30, 0x8F	; 143
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	91 83       	std	Z+1, r25	; 0x01
    27a6:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    27a8:	80 e3       	ldi	r24, 0x30	; 48
    27aa:	0e 94 4e 19 	call	0x329c	; 0x329c <LCD_voidSendInitCommand>
    27ae:	fe 01       	movw	r30, r28
    27b0:	e3 59       	subi	r30, 0x93	; 147
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	a0 e8       	ldi	r26, 0x80	; 128
    27ba:	bf e3       	ldi	r27, 0x3F	; 63
    27bc:	80 83       	st	Z, r24
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	a2 83       	std	Z+2, r26	; 0x02
    27c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c4:	8e 01       	movw	r16, r28
    27c6:	07 59       	subi	r16, 0x97	; 151
    27c8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ca:	fe 01       	movw	r30, r28
    27cc:	e3 59       	subi	r30, 0x93	; 147
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	60 81       	ld	r22, Z
    27d2:	71 81       	ldd	r23, Z+1	; 0x01
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	93 81       	ldd	r25, Z+3	; 0x03
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a e7       	ldi	r20, 0x7A	; 122
    27de:	55 e4       	ldi	r21, 0x45	; 69
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	f8 01       	movw	r30, r16
    27ea:	80 83       	st	Z, r24
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	a2 83       	std	Z+2, r26	; 0x02
    27f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27f2:	fe 01       	movw	r30, r28
    27f4:	e7 59       	subi	r30, 0x97	; 151
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e8       	ldi	r20, 0x80	; 128
    2806:	5f e3       	ldi	r21, 0x3F	; 63
    2808:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    280c:	88 23       	and	r24, r24
    280e:	44 f4       	brge	.+16     	; 0x2820 <LCD_voidInit+0x364>
		__ticks = 1;
    2810:	fe 01       	movw	r30, r28
    2812:	e9 59       	subi	r30, 0x99	; 153
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
    281e:	64 c0       	rjmp	.+200    	; 0x28e8 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    2820:	fe 01       	movw	r30, r28
    2822:	e7 59       	subi	r30, 0x97	; 151
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	3f ef       	ldi	r19, 0xFF	; 255
    2832:	4f e7       	ldi	r20, 0x7F	; 127
    2834:	57 e4       	ldi	r21, 0x47	; 71
    2836:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    283a:	18 16       	cp	r1, r24
    283c:	0c f0       	brlt	.+2      	; 0x2840 <LCD_voidInit+0x384>
    283e:	43 c0       	rjmp	.+134    	; 0x28c6 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2840:	fe 01       	movw	r30, r28
    2842:	e3 59       	subi	r30, 0x93	; 147
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	60 81       	ld	r22, Z
    2848:	71 81       	ldd	r23, Z+1	; 0x01
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e2       	ldi	r20, 0x20	; 32
    2854:	51 e4       	ldi	r21, 0x41	; 65
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8e 01       	movw	r16, r28
    2860:	09 59       	subi	r16, 0x99	; 153
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	f8 01       	movw	r30, r16
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
    2876:	1f c0       	rjmp	.+62     	; 0x28b6 <LCD_voidInit+0x3fa>
    2878:	fe 01       	movw	r30, r28
    287a:	eb 59       	subi	r30, 0x9B	; 155
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 e9       	ldi	r24, 0x90	; 144
    2880:	91 e0       	ldi	r25, 0x01	; 1
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	fe 01       	movw	r30, r28
    2888:	eb 59       	subi	r30, 0x9B	; 155
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	91 81       	ldd	r25, Z+1	; 0x01
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <LCD_voidInit+0x3d4>
    2894:	fe 01       	movw	r30, r28
    2896:	eb 59       	subi	r30, 0x9B	; 155
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289e:	de 01       	movw	r26, r28
    28a0:	a9 59       	subi	r26, 0x99	; 153
    28a2:	bf 4f       	sbci	r27, 0xFF	; 255
    28a4:	fe 01       	movw	r30, r28
    28a6:	e9 59       	subi	r30, 0x99	; 153
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 81       	ld	r24, Z
    28ac:	91 81       	ldd	r25, Z+1	; 0x01
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	11 96       	adiw	r26, 0x01	; 1
    28b2:	9c 93       	st	X, r25
    28b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b6:	fe 01       	movw	r30, r28
    28b8:	e9 59       	subi	r30, 0x99	; 153
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	d1 f6       	brne	.-76     	; 0x2878 <LCD_voidInit+0x3bc>
    28c4:	27 c0       	rjmp	.+78     	; 0x2914 <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c6:	8e 01       	movw	r16, r28
    28c8:	09 59       	subi	r16, 0x99	; 153
    28ca:	1f 4f       	sbci	r17, 0xFF	; 255
    28cc:	fe 01       	movw	r30, r28
    28ce:	e7 59       	subi	r30, 0x97	; 151
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	f8 01       	movw	r30, r16
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	de 01       	movw	r26, r28
    28ea:	ad 59       	subi	r26, 0x9D	; 157
    28ec:	bf 4f       	sbci	r27, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	e9 59       	subi	r30, 0x99	; 153
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 81       	ld	r24, Z
    28f6:	91 81       	ldd	r25, Z+1	; 0x01
    28f8:	8d 93       	st	X+, r24
    28fa:	9c 93       	st	X, r25
    28fc:	fe 01       	movw	r30, r28
    28fe:	ed 59       	subi	r30, 0x9D	; 157
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <LCD_voidInit+0x44a>
    290a:	fe 01       	movw	r30, r28
    290c:	ed 59       	subi	r30, 0x9D	; 157
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2914:	80 e3       	ldi	r24, 0x30	; 48
    2916:	0e 94 4e 19 	call	0x329c	; 0x329c <LCD_voidSendInitCommand>
    291a:	fe 01       	movw	r30, r28
    291c:	e1 5a       	subi	r30, 0xA1	; 161
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	a0 e8       	ldi	r26, 0x80	; 128
    2926:	bf e3       	ldi	r27, 0x3F	; 63
    2928:	80 83       	st	Z, r24
    292a:	91 83       	std	Z+1, r25	; 0x01
    292c:	a2 83       	std	Z+2, r26	; 0x02
    292e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2930:	8e 01       	movw	r16, r28
    2932:	05 5a       	subi	r16, 0xA5	; 165
    2934:	1f 4f       	sbci	r17, 0xFF	; 255
    2936:	fe 01       	movw	r30, r28
    2938:	e1 5a       	subi	r30, 0xA1	; 161
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	60 81       	ld	r22, Z
    293e:	71 81       	ldd	r23, Z+1	; 0x01
    2940:	82 81       	ldd	r24, Z+2	; 0x02
    2942:	93 81       	ldd	r25, Z+3	; 0x03
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	4a e7       	ldi	r20, 0x7A	; 122
    294a:	55 e4       	ldi	r21, 0x45	; 69
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	f8 01       	movw	r30, r16
    2956:	80 83       	st	Z, r24
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	a2 83       	std	Z+2, r26	; 0x02
    295c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    295e:	fe 01       	movw	r30, r28
    2960:	e5 5a       	subi	r30, 0xA5	; 165
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e8       	ldi	r20, 0x80	; 128
    2972:	5f e3       	ldi	r21, 0x3F	; 63
    2974:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2978:	88 23       	and	r24, r24
    297a:	44 f4       	brge	.+16     	; 0x298c <LCD_voidInit+0x4d0>
		__ticks = 1;
    297c:	fe 01       	movw	r30, r28
    297e:	e7 5a       	subi	r30, 0xA7	; 167
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	91 83       	std	Z+1, r25	; 0x01
    2988:	80 83       	st	Z, r24
    298a:	64 c0       	rjmp	.+200    	; 0x2a54 <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    298c:	fe 01       	movw	r30, r28
    298e:	e5 5a       	subi	r30, 0xA5	; 165
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	82 81       	ldd	r24, Z+2	; 0x02
    2998:	93 81       	ldd	r25, Z+3	; 0x03
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	3f ef       	ldi	r19, 0xFF	; 255
    299e:	4f e7       	ldi	r20, 0x7F	; 127
    29a0:	57 e4       	ldi	r21, 0x47	; 71
    29a2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    29a6:	18 16       	cp	r1, r24
    29a8:	0c f0       	brlt	.+2      	; 0x29ac <LCD_voidInit+0x4f0>
    29aa:	43 c0       	rjmp	.+134    	; 0x2a32 <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ac:	fe 01       	movw	r30, r28
    29ae:	e1 5a       	subi	r30, 0xA1	; 161
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	60 81       	ld	r22, Z
    29b4:	71 81       	ldd	r23, Z+1	; 0x01
    29b6:	82 81       	ldd	r24, Z+2	; 0x02
    29b8:	93 81       	ldd	r25, Z+3	; 0x03
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	40 e2       	ldi	r20, 0x20	; 32
    29c0:	51 e4       	ldi	r21, 0x41	; 65
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	8e 01       	movw	r16, r28
    29cc:	07 5a       	subi	r16, 0xA7	; 167
    29ce:	1f 4f       	sbci	r17, 0xFF	; 255
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	f8 01       	movw	r30, r16
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
    29e2:	1f c0       	rjmp	.+62     	; 0x2a22 <LCD_voidInit+0x566>
    29e4:	fe 01       	movw	r30, r28
    29e6:	e9 5a       	subi	r30, 0xA9	; 169
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 e9       	ldi	r24, 0x90	; 144
    29ec:	91 e0       	ldi	r25, 0x01	; 1
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
    29f2:	fe 01       	movw	r30, r28
    29f4:	e9 5a       	subi	r30, 0xA9	; 169
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 81       	ld	r24, Z
    29fa:	91 81       	ldd	r25, Z+1	; 0x01
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <LCD_voidInit+0x540>
    2a00:	fe 01       	movw	r30, r28
    2a02:	e9 5a       	subi	r30, 0xA9	; 169
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0a:	de 01       	movw	r26, r28
    2a0c:	a7 5a       	subi	r26, 0xA7	; 167
    2a0e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a10:	fe 01       	movw	r30, r28
    2a12:	e7 5a       	subi	r30, 0xA7	; 167
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	80 81       	ld	r24, Z
    2a18:	91 81       	ldd	r25, Z+1	; 0x01
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	9c 93       	st	X, r25
    2a20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	fe 01       	movw	r30, r28
    2a24:	e7 5a       	subi	r30, 0xA7	; 167
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	d1 f6       	brne	.-76     	; 0x29e4 <LCD_voidInit+0x528>
    2a30:	27 c0       	rjmp	.+78     	; 0x2a80 <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a32:	8e 01       	movw	r16, r28
    2a34:	07 5a       	subi	r16, 0xA7	; 167
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e5 5a       	subi	r30, 0xA5	; 165
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	60 81       	ld	r22, Z
    2a40:	71 81       	ldd	r23, Z+1	; 0x01
    2a42:	82 81       	ldd	r24, Z+2	; 0x02
    2a44:	93 81       	ldd	r25, Z+3	; 0x03
    2a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	f8 01       	movw	r30, r16
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	80 83       	st	Z, r24
    2a54:	de 01       	movw	r26, r28
    2a56:	ab 5a       	subi	r26, 0xAB	; 171
    2a58:	bf 4f       	sbci	r27, 0xFF	; 255
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	e7 5a       	subi	r30, 0xA7	; 167
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	8d 93       	st	X+, r24
    2a66:	9c 93       	st	X, r25
    2a68:	fe 01       	movw	r30, r28
    2a6a:	eb 5a       	subi	r30, 0xAB	; 171
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	91 81       	ldd	r25, Z+1	; 0x01
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <LCD_voidInit+0x5b6>
    2a76:	fe 01       	movw	r30, r28
    2a78:	eb 5a       	subi	r30, 0xAB	; 171
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    2a80:	80 e2       	ldi	r24, 0x20	; 32
    2a82:	0e 94 4e 19 	call	0x329c	; 0x329c <LCD_voidSendInitCommand>
    2a86:	fe 01       	movw	r30, r28
    2a88:	ef 5a       	subi	r30, 0xAF	; 175
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e8       	ldi	r26, 0x80	; 128
    2a92:	bf e3       	ldi	r27, 0x3F	; 63
    2a94:	80 83       	st	Z, r24
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	a2 83       	std	Z+2, r26	; 0x02
    2a9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	8e 01       	movw	r16, r28
    2a9e:	03 5b       	subi	r16, 0xB3	; 179
    2aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	ef 5a       	subi	r30, 0xAF	; 175
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	60 81       	ld	r22, Z
    2aaa:	71 81       	ldd	r23, Z+1	; 0x01
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	93 81       	ldd	r25, Z+3	; 0x03
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	4a e7       	ldi	r20, 0x7A	; 122
    2ab6:	55 e4       	ldi	r21, 0x45	; 69
    2ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	f8 01       	movw	r30, r16
    2ac2:	80 83       	st	Z, r24
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	a2 83       	std	Z+2, r26	; 0x02
    2ac8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aca:	fe 01       	movw	r30, r28
    2acc:	e3 5b       	subi	r30, 0xB3	; 179
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	60 81       	ld	r22, Z
    2ad2:	71 81       	ldd	r23, Z+1	; 0x01
    2ad4:	82 81       	ldd	r24, Z+2	; 0x02
    2ad6:	93 81       	ldd	r25, Z+3	; 0x03
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ae4:	88 23       	and	r24, r24
    2ae6:	44 f4       	brge	.+16     	; 0x2af8 <LCD_voidInit+0x63c>
		__ticks = 1;
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e5 5b       	subi	r30, 0xB5	; 181
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	80 83       	st	Z, r24
    2af6:	64 c0       	rjmp	.+200    	; 0x2bc0 <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    2af8:	fe 01       	movw	r30, r28
    2afa:	e3 5b       	subi	r30, 0xB3	; 179
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	60 81       	ld	r22, Z
    2b00:	71 81       	ldd	r23, Z+1	; 0x01
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	3f ef       	ldi	r19, 0xFF	; 255
    2b0a:	4f e7       	ldi	r20, 0x7F	; 127
    2b0c:	57 e4       	ldi	r21, 0x47	; 71
    2b0e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b12:	18 16       	cp	r1, r24
    2b14:	0c f0       	brlt	.+2      	; 0x2b18 <LCD_voidInit+0x65c>
    2b16:	43 c0       	rjmp	.+134    	; 0x2b9e <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ef 5a       	subi	r30, 0xAF	; 175
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	60 81       	ld	r22, Z
    2b20:	71 81       	ldd	r23, Z+1	; 0x01
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	93 81       	ldd	r25, Z+3	; 0x03
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e2       	ldi	r20, 0x20	; 32
    2b2c:	51 e4       	ldi	r21, 0x41	; 65
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	8e 01       	movw	r16, r28
    2b38:	05 5b       	subi	r16, 0xB5	; 181
    2b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	f8 01       	movw	r30, r16
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	80 83       	st	Z, r24
    2b4e:	1f c0       	rjmp	.+62     	; 0x2b8e <LCD_voidInit+0x6d2>
    2b50:	fe 01       	movw	r30, r28
    2b52:	e7 5b       	subi	r30, 0xB7	; 183
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	80 e9       	ldi	r24, 0x90	; 144
    2b58:	91 e0       	ldi	r25, 0x01	; 1
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e7 5b       	subi	r30, 0xB7	; 183
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	80 81       	ld	r24, Z
    2b66:	91 81       	ldd	r25, Z+1	; 0x01
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_voidInit+0x6ac>
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e7 5b       	subi	r30, 0xB7	; 183
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b76:	de 01       	movw	r26, r28
    2b78:	a5 5b       	subi	r26, 0xB5	; 181
    2b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e5 5b       	subi	r30, 0xB5	; 181
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	11 96       	adiw	r26, 0x01	; 1
    2b8a:	9c 93       	st	X, r25
    2b8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e5 5b       	subi	r30, 0xB5	; 181
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	d1 f6       	brne	.-76     	; 0x2b50 <LCD_voidInit+0x694>
    2b9c:	27 c0       	rjmp	.+78     	; 0x2bec <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9e:	8e 01       	movw	r16, r28
    2ba0:	05 5b       	subi	r16, 0xB5	; 181
    2ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e3 5b       	subi	r30, 0xB3	; 179
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	60 81       	ld	r22, Z
    2bac:	71 81       	ldd	r23, Z+1	; 0x01
    2bae:	82 81       	ldd	r24, Z+2	; 0x02
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	f8 01       	movw	r30, r16
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	80 83       	st	Z, r24
    2bc0:	de 01       	movw	r26, r28
    2bc2:	a9 5b       	subi	r26, 0xB9	; 185
    2bc4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e5 5b       	subi	r30, 0xB5	; 181
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	8d 93       	st	X+, r24
    2bd2:	9c 93       	st	X, r25
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e9 5b       	subi	r30, 0xB9	; 185
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <LCD_voidInit+0x722>
    2be2:	fe 01       	movw	r30, r28
    2be4:	e9 5b       	subi	r30, 0xB9	; 185
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    2bec:	88 e2       	ldi	r24, 0x28	; 40
    2bee:	0e 94 5e 18 	call	0x30bc	; 0x30bc <LCD_voidSendCommand>
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ed 5b       	subi	r30, 0xBD	; 189
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a0 e8       	ldi	r26, 0x80	; 128
    2bfe:	bf e3       	ldi	r27, 0x3F	; 63
    2c00:	80 83       	st	Z, r24
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	a2 83       	std	Z+2, r26	; 0x02
    2c06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c08:	8e 01       	movw	r16, r28
    2c0a:	01 5c       	subi	r16, 0xC1	; 193
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ed 5b       	subi	r30, 0xBD	; 189
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	4a e7       	ldi	r20, 0x7A	; 122
    2c22:	55 e4       	ldi	r21, 0x45	; 69
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	f8 01       	movw	r30, r16
    2c2e:	80 83       	st	Z, r24
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	a2 83       	std	Z+2, r26	; 0x02
    2c34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c36:	fe 01       	movw	r30, r28
    2c38:	ff 96       	adiw	r30, 0x3f	; 63
    2c3a:	60 81       	ld	r22, Z
    2c3c:	71 81       	ldd	r23, Z+1	; 0x01
    2c3e:	82 81       	ldd	r24, Z+2	; 0x02
    2c40:	93 81       	ldd	r25, Z+3	; 0x03
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e8       	ldi	r20, 0x80	; 128
    2c48:	5f e3       	ldi	r21, 0x3F	; 63
    2c4a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c4e:	88 23       	and	r24, r24
    2c50:	2c f4       	brge	.+10     	; 0x2c5c <LCD_voidInit+0x7a0>
		__ticks = 1;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	9e af       	std	Y+62, r25	; 0x3e
    2c58:	8d af       	std	Y+61, r24	; 0x3d
    2c5a:	46 c0       	rjmp	.+140    	; 0x2ce8 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	ff 96       	adiw	r30, 0x3f	; 63
    2c60:	60 81       	ld	r22, Z
    2c62:	71 81       	ldd	r23, Z+1	; 0x01
    2c64:	82 81       	ldd	r24, Z+2	; 0x02
    2c66:	93 81       	ldd	r25, Z+3	; 0x03
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	3f ef       	ldi	r19, 0xFF	; 255
    2c6c:	4f e7       	ldi	r20, 0x7F	; 127
    2c6e:	57 e4       	ldi	r21, 0x47	; 71
    2c70:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c74:	18 16       	cp	r1, r24
    2c76:	64 f5       	brge	.+88     	; 0x2cd0 <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c78:	fe 01       	movw	r30, r28
    2c7a:	ed 5b       	subi	r30, 0xBD	; 189
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e2       	ldi	r20, 0x20	; 32
    2c8c:	51 e4       	ldi	r21, 0x41	; 65
    2c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	bc 01       	movw	r22, r24
    2c98:	cd 01       	movw	r24, r26
    2c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9e af       	std	Y+62, r25	; 0x3e
    2ca4:	8d af       	std	Y+61, r24	; 0x3d
    2ca6:	0f c0       	rjmp	.+30     	; 0x2cc6 <LCD_voidInit+0x80a>
    2ca8:	80 e9       	ldi	r24, 0x90	; 144
    2caa:	91 e0       	ldi	r25, 0x01	; 1
    2cac:	9c af       	std	Y+60, r25	; 0x3c
    2cae:	8b af       	std	Y+59, r24	; 0x3b
    2cb0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cb2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <LCD_voidInit+0x7f8>
    2cb8:	9c af       	std	Y+60, r25	; 0x3c
    2cba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	9e af       	std	Y+62, r25	; 0x3e
    2cc4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	69 f7       	brne	.-38     	; 0x2ca8 <LCD_voidInit+0x7ec>
    2cce:	16 c0       	rjmp	.+44     	; 0x2cfc <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd0:	fe 01       	movw	r30, r28
    2cd2:	ff 96       	adiw	r30, 0x3f	; 63
    2cd4:	60 81       	ld	r22, Z
    2cd6:	71 81       	ldd	r23, Z+1	; 0x01
    2cd8:	82 81       	ldd	r24, Z+2	; 0x02
    2cda:	93 81       	ldd	r25, Z+3	; 0x03
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	9e af       	std	Y+62, r25	; 0x3e
    2ce6:	8d af       	std	Y+61, r24	; 0x3d
    2ce8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cea:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cec:	9a af       	std	Y+58, r25	; 0x3a
    2cee:	89 af       	std	Y+57, r24	; 0x39
    2cf0:	89 ad       	ldd	r24, Y+57	; 0x39
    2cf2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	f1 f7       	brne	.-4      	; 0x2cf4 <LCD_voidInit+0x838>
    2cf8:	9a af       	std	Y+58, r25	; 0x3a
    2cfa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    2cfc:	88 e0       	ldi	r24, 0x08	; 8
    2cfe:	0e 94 5e 18 	call	0x30bc	; 0x30bc <LCD_voidSendCommand>
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a0 e8       	ldi	r26, 0x80	; 128
    2d08:	bf e3       	ldi	r27, 0x3F	; 63
    2d0a:	8d ab       	std	Y+53, r24	; 0x35
    2d0c:	9e ab       	std	Y+54, r25	; 0x36
    2d0e:	af ab       	std	Y+55, r26	; 0x37
    2d10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d12:	6d a9       	ldd	r22, Y+53	; 0x35
    2d14:	7e a9       	ldd	r23, Y+54	; 0x36
    2d16:	8f a9       	ldd	r24, Y+55	; 0x37
    2d18:	98 ad       	ldd	r25, Y+56	; 0x38
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	4a e7       	ldi	r20, 0x7A	; 122
    2d20:	55 e4       	ldi	r21, 0x45	; 69
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	89 ab       	std	Y+49, r24	; 0x31
    2d2c:	9a ab       	std	Y+50, r25	; 0x32
    2d2e:	ab ab       	std	Y+51, r26	; 0x33
    2d30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d32:	69 a9       	ldd	r22, Y+49	; 0x31
    2d34:	7a a9       	ldd	r23, Y+50	; 0x32
    2d36:	8b a9       	ldd	r24, Y+51	; 0x33
    2d38:	9c a9       	ldd	r25, Y+52	; 0x34
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e8       	ldi	r20, 0x80	; 128
    2d40:	5f e3       	ldi	r21, 0x3F	; 63
    2d42:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d46:	88 23       	and	r24, r24
    2d48:	2c f4       	brge	.+10     	; 0x2d54 <LCD_voidInit+0x898>
		__ticks = 1;
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	98 ab       	std	Y+48, r25	; 0x30
    2d50:	8f a7       	std	Y+47, r24	; 0x2f
    2d52:	3f c0       	rjmp	.+126    	; 0x2dd2 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    2d54:	69 a9       	ldd	r22, Y+49	; 0x31
    2d56:	7a a9       	ldd	r23, Y+50	; 0x32
    2d58:	8b a9       	ldd	r24, Y+51	; 0x33
    2d5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	3f ef       	ldi	r19, 0xFF	; 255
    2d60:	4f e7       	ldi	r20, 0x7F	; 127
    2d62:	57 e4       	ldi	r21, 0x47	; 71
    2d64:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d68:	18 16       	cp	r1, r24
    2d6a:	4c f5       	brge	.+82     	; 0x2dbe <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6c:	6d a9       	ldd	r22, Y+53	; 0x35
    2d6e:	7e a9       	ldd	r23, Y+54	; 0x36
    2d70:	8f a9       	ldd	r24, Y+55	; 0x37
    2d72:	98 ad       	ldd	r25, Y+56	; 0x38
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e2       	ldi	r20, 0x20	; 32
    2d7a:	51 e4       	ldi	r21, 0x41	; 65
    2d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	98 ab       	std	Y+48, r25	; 0x30
    2d92:	8f a7       	std	Y+47, r24	; 0x2f
    2d94:	0f c0       	rjmp	.+30     	; 0x2db4 <LCD_voidInit+0x8f8>
    2d96:	80 e9       	ldi	r24, 0x90	; 144
    2d98:	91 e0       	ldi	r25, 0x01	; 1
    2d9a:	9e a7       	std	Y+46, r25	; 0x2e
    2d9c:	8d a7       	std	Y+45, r24	; 0x2d
    2d9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2da0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <LCD_voidInit+0x8e6>
    2da6:	9e a7       	std	Y+46, r25	; 0x2e
    2da8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2daa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dac:	98 a9       	ldd	r25, Y+48	; 0x30
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	98 ab       	std	Y+48, r25	; 0x30
    2db2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2db6:	98 a9       	ldd	r25, Y+48	; 0x30
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	69 f7       	brne	.-38     	; 0x2d96 <LCD_voidInit+0x8da>
    2dbc:	14 c0       	rjmp	.+40     	; 0x2de6 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbe:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc0:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc2:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc4:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	98 ab       	std	Y+48, r25	; 0x30
    2dd0:	8f a7       	std	Y+47, r24	; 0x2f
    2dd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dd4:	98 a9       	ldd	r25, Y+48	; 0x30
    2dd6:	9c a7       	std	Y+44, r25	; 0x2c
    2dd8:	8b a7       	std	Y+43, r24	; 0x2b
    2dda:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ddc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <LCD_voidInit+0x922>
    2de2:	9c a7       	std	Y+44, r25	; 0x2c
    2de4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	0e 94 5e 18 	call	0x30bc	; 0x30bc <LCD_voidSendCommand>
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	a0 ea       	ldi	r26, 0xA0	; 160
    2df2:	b0 e4       	ldi	r27, 0x40	; 64
    2df4:	8f a3       	std	Y+39, r24	; 0x27
    2df6:	98 a7       	std	Y+40, r25	; 0x28
    2df8:	a9 a7       	std	Y+41, r26	; 0x29
    2dfa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfc:	6f a1       	ldd	r22, Y+39	; 0x27
    2dfe:	78 a5       	ldd	r23, Y+40	; 0x28
    2e00:	89 a5       	ldd	r24, Y+41	; 0x29
    2e02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	4a e7       	ldi	r20, 0x7A	; 122
    2e0a:	55 e4       	ldi	r21, 0x45	; 69
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	8b a3       	std	Y+35, r24	; 0x23
    2e16:	9c a3       	std	Y+36, r25	; 0x24
    2e18:	ad a3       	std	Y+37, r26	; 0x25
    2e1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e20:	8d a1       	ldd	r24, Y+37	; 0x25
    2e22:	9e a1       	ldd	r25, Y+38	; 0x26
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e8       	ldi	r20, 0x80	; 128
    2e2a:	5f e3       	ldi	r21, 0x3F	; 63
    2e2c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e30:	88 23       	and	r24, r24
    2e32:	2c f4       	brge	.+10     	; 0x2e3e <LCD_voidInit+0x982>
		__ticks = 1;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	9a a3       	std	Y+34, r25	; 0x22
    2e3a:	89 a3       	std	Y+33, r24	; 0x21
    2e3c:	3f c0       	rjmp	.+126    	; 0x2ebc <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    2e3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e40:	7c a1       	ldd	r23, Y+36	; 0x24
    2e42:	8d a1       	ldd	r24, Y+37	; 0x25
    2e44:	9e a1       	ldd	r25, Y+38	; 0x26
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	3f ef       	ldi	r19, 0xFF	; 255
    2e4a:	4f e7       	ldi	r20, 0x7F	; 127
    2e4c:	57 e4       	ldi	r21, 0x47	; 71
    2e4e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e52:	18 16       	cp	r1, r24
    2e54:	4c f5       	brge	.+82     	; 0x2ea8 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e56:	6f a1       	ldd	r22, Y+39	; 0x27
    2e58:	78 a5       	ldd	r23, Y+40	; 0x28
    2e5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	40 e2       	ldi	r20, 0x20	; 32
    2e64:	51 e4       	ldi	r21, 0x41	; 65
    2e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	bc 01       	movw	r22, r24
    2e70:	cd 01       	movw	r24, r26
    2e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	9a a3       	std	Y+34, r25	; 0x22
    2e7c:	89 a3       	std	Y+33, r24	; 0x21
    2e7e:	0f c0       	rjmp	.+30     	; 0x2e9e <LCD_voidInit+0x9e2>
    2e80:	80 e9       	ldi	r24, 0x90	; 144
    2e82:	91 e0       	ldi	r25, 0x01	; 1
    2e84:	98 a3       	std	Y+32, r25	; 0x20
    2e86:	8f 8f       	std	Y+31, r24	; 0x1f
    2e88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	f1 f7       	brne	.-4      	; 0x2e8c <LCD_voidInit+0x9d0>
    2e90:	98 a3       	std	Y+32, r25	; 0x20
    2e92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e94:	89 a1       	ldd	r24, Y+33	; 0x21
    2e96:	9a a1       	ldd	r25, Y+34	; 0x22
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	9a a3       	std	Y+34, r25	; 0x22
    2e9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2ea0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	69 f7       	brne	.-38     	; 0x2e80 <LCD_voidInit+0x9c4>
    2ea6:	14 c0       	rjmp	.+40     	; 0x2ed0 <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea8:	6b a1       	ldd	r22, Y+35	; 0x23
    2eaa:	7c a1       	ldd	r23, Y+36	; 0x24
    2eac:	8d a1       	ldd	r24, Y+37	; 0x25
    2eae:	9e a1       	ldd	r25, Y+38	; 0x26
    2eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	9a a3       	std	Y+34, r25	; 0x22
    2eba:	89 a3       	std	Y+33, r24	; 0x21
    2ebc:	89 a1       	ldd	r24, Y+33	; 0x21
    2ebe:	9a a1       	ldd	r25, Y+34	; 0x22
    2ec0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ec4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <LCD_voidInit+0xa0c>
    2ecc:	9e 8f       	std	Y+30, r25	; 0x1e
    2ece:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    2ed0:	8c e0       	ldi	r24, 0x0C	; 12
    2ed2:	0e 94 5e 18 	call	0x30bc	; 0x30bc <LCD_voidSendCommand>
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	a0 e8       	ldi	r26, 0x80	; 128
    2edc:	bf e3       	ldi	r27, 0x3F	; 63
    2ede:	89 8f       	std	Y+25, r24	; 0x19
    2ee0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ee2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ee4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ee8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	4a e7       	ldi	r20, 0x7A	; 122
    2ef4:	55 e4       	ldi	r21, 0x45	; 69
    2ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	8d 8b       	std	Y+21, r24	; 0x15
    2f00:	9e 8b       	std	Y+22, r25	; 0x16
    2f02:	af 8b       	std	Y+23, r26	; 0x17
    2f04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f06:	6d 89       	ldd	r22, Y+21	; 0x15
    2f08:	7e 89       	ldd	r23, Y+22	; 0x16
    2f0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	40 e8       	ldi	r20, 0x80	; 128
    2f14:	5f e3       	ldi	r21, 0x3F	; 63
    2f16:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f1a:	88 23       	and	r24, r24
    2f1c:	2c f4       	brge	.+10     	; 0x2f28 <LCD_voidInit+0xa6c>
		__ticks = 1;
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	9c 8b       	std	Y+20, r25	; 0x14
    2f24:	8b 8b       	std	Y+19, r24	; 0x13
    2f26:	3f c0       	rjmp	.+126    	; 0x2fa6 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    2f28:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	3f ef       	ldi	r19, 0xFF	; 255
    2f34:	4f e7       	ldi	r20, 0x7F	; 127
    2f36:	57 e4       	ldi	r21, 0x47	; 71
    2f38:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f3c:	18 16       	cp	r1, r24
    2f3e:	4c f5       	brge	.+82     	; 0x2f92 <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f40:	69 8d       	ldd	r22, Y+25	; 0x19
    2f42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e2       	ldi	r20, 0x20	; 32
    2f4e:	51 e4       	ldi	r21, 0x41	; 65
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	bc 01       	movw	r22, r24
    2f5a:	cd 01       	movw	r24, r26
    2f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	9c 8b       	std	Y+20, r25	; 0x14
    2f66:	8b 8b       	std	Y+19, r24	; 0x13
    2f68:	0f c0       	rjmp	.+30     	; 0x2f88 <LCD_voidInit+0xacc>
    2f6a:	80 e9       	ldi	r24, 0x90	; 144
    2f6c:	91 e0       	ldi	r25, 0x01	; 1
    2f6e:	9a 8b       	std	Y+18, r25	; 0x12
    2f70:	89 8b       	std	Y+17, r24	; 0x11
    2f72:	89 89       	ldd	r24, Y+17	; 0x11
    2f74:	9a 89       	ldd	r25, Y+18	; 0x12
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	f1 f7       	brne	.-4      	; 0x2f76 <LCD_voidInit+0xaba>
    2f7a:	9a 8b       	std	Y+18, r25	; 0x12
    2f7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f80:	9c 89       	ldd	r25, Y+20	; 0x14
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	9c 8b       	std	Y+20, r25	; 0x14
    2f86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f88:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	69 f7       	brne	.-38     	; 0x2f6a <LCD_voidInit+0xaae>
    2f90:	14 c0       	rjmp	.+40     	; 0x2fba <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f92:	6d 89       	ldd	r22, Y+21	; 0x15
    2f94:	7e 89       	ldd	r23, Y+22	; 0x16
    2f96:	8f 89       	ldd	r24, Y+23	; 0x17
    2f98:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	9c 8b       	std	Y+20, r25	; 0x14
    2fa4:	8b 8b       	std	Y+19, r24	; 0x13
    2fa6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa8:	9c 89       	ldd	r25, Y+20	; 0x14
    2faa:	98 8b       	std	Y+16, r25	; 0x10
    2fac:	8f 87       	std	Y+15, r24	; 0x0f
    2fae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fb0:	98 89       	ldd	r25, Y+16	; 0x10
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <LCD_voidInit+0xaf6>
    2fb6:	98 8b       	std	Y+16, r25	; 0x10
    2fb8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    2fba:	86 e0       	ldi	r24, 0x06	; 6
    2fbc:	0e 94 5e 18 	call	0x30bc	; 0x30bc <LCD_voidSendCommand>
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	a0 e8       	ldi	r26, 0x80	; 128
    2fc6:	bf e3       	ldi	r27, 0x3F	; 63
    2fc8:	8b 87       	std	Y+11, r24	; 0x0b
    2fca:	9c 87       	std	Y+12, r25	; 0x0c
    2fcc:	ad 87       	std	Y+13, r26	; 0x0d
    2fce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	4a e7       	ldi	r20, 0x7A	; 122
    2fde:	55 e4       	ldi	r21, 0x45	; 69
    2fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	8f 83       	std	Y+7, r24	; 0x07
    2fea:	98 87       	std	Y+8, r25	; 0x08
    2fec:	a9 87       	std	Y+9, r26	; 0x09
    2fee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ff0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff2:	78 85       	ldd	r23, Y+8	; 0x08
    2ff4:	89 85       	ldd	r24, Y+9	; 0x09
    2ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 e8       	ldi	r20, 0x80	; 128
    2ffe:	5f e3       	ldi	r21, 0x3F	; 63
    3000:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3004:	88 23       	and	r24, r24
    3006:	2c f4       	brge	.+10     	; 0x3012 <LCD_voidInit+0xb56>
		__ticks = 1;
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	9e 83       	std	Y+6, r25	; 0x06
    300e:	8d 83       	std	Y+5, r24	; 0x05
    3010:	3f c0       	rjmp	.+126    	; 0x3090 <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    3012:	6f 81       	ldd	r22, Y+7	; 0x07
    3014:	78 85       	ldd	r23, Y+8	; 0x08
    3016:	89 85       	ldd	r24, Y+9	; 0x09
    3018:	9a 85       	ldd	r25, Y+10	; 0x0a
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	3f ef       	ldi	r19, 0xFF	; 255
    301e:	4f e7       	ldi	r20, 0x7F	; 127
    3020:	57 e4       	ldi	r21, 0x47	; 71
    3022:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3026:	18 16       	cp	r1, r24
    3028:	4c f5       	brge	.+82     	; 0x307c <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302a:	6b 85       	ldd	r22, Y+11	; 0x0b
    302c:	7c 85       	ldd	r23, Y+12	; 0x0c
    302e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3030:	9e 85       	ldd	r25, Y+14	; 0x0e
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e2       	ldi	r20, 0x20	; 32
    3038:	51 e4       	ldi	r21, 0x41	; 65
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	9e 83       	std	Y+6, r25	; 0x06
    3050:	8d 83       	std	Y+5, r24	; 0x05
    3052:	0f c0       	rjmp	.+30     	; 0x3072 <LCD_voidInit+0xbb6>
    3054:	80 e9       	ldi	r24, 0x90	; 144
    3056:	91 e0       	ldi	r25, 0x01	; 1
    3058:	9c 83       	std	Y+4, r25	; 0x04
    305a:	8b 83       	std	Y+3, r24	; 0x03
    305c:	8b 81       	ldd	r24, Y+3	; 0x03
    305e:	9c 81       	ldd	r25, Y+4	; 0x04
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	f1 f7       	brne	.-4      	; 0x3060 <LCD_voidInit+0xba4>
    3064:	9c 83       	std	Y+4, r25	; 0x04
    3066:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3068:	8d 81       	ldd	r24, Y+5	; 0x05
    306a:	9e 81       	ldd	r25, Y+6	; 0x06
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	9e 83       	std	Y+6, r25	; 0x06
    3070:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	9e 81       	ldd	r25, Y+6	; 0x06
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	69 f7       	brne	.-38     	; 0x3054 <LCD_voidInit+0xb98>
    307a:	14 c0       	rjmp	.+40     	; 0x30a4 <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307c:	6f 81       	ldd	r22, Y+7	; 0x07
    307e:	78 85       	ldd	r23, Y+8	; 0x08
    3080:	89 85       	ldd	r24, Y+9	; 0x09
    3082:	9a 85       	ldd	r25, Y+10	; 0x0a
    3084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	9e 83       	std	Y+6, r25	; 0x06
    308e:	8d 83       	std	Y+5, r24	; 0x05
    3090:	8d 81       	ldd	r24, Y+5	; 0x05
    3092:	9e 81       	ldd	r25, Y+6	; 0x06
    3094:	9a 83       	std	Y+2, r25	; 0x02
    3096:	89 83       	std	Y+1, r24	; 0x01
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	9a 81       	ldd	r25, Y+2	; 0x02
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <LCD_voidInit+0xbe0>
    30a0:	9a 83       	std	Y+2, r25	; 0x02
    30a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    30a4:	c4 57       	subi	r28, 0x74	; 116
    30a6:	df 4f       	sbci	r29, 0xFF	; 255
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	f8 94       	cli
    30ac:	de bf       	out	0x3e, r29	; 62
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	1f 91       	pop	r17
    30b8:	0f 91       	pop	r16
    30ba:	08 95       	ret

000030bc <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	2f 97       	sbiw	r28, 0x0f	; 15
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	63 e0       	ldi	r22, 0x03	; 3
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	62 e0       	ldi	r22, 0x02	; 2
    30e0:	41 e0       	ldi	r20, 0x01	; 1
    30e2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(command, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(command, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(command, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(command, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    30e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e8:	82 95       	swap	r24
    30ea:	8f 70       	andi	r24, 0x0F	; 15
    30ec:	98 2f       	mov	r25, r24
    30ee:	91 70       	andi	r25, 0x01	; 1
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	60 e0       	ldi	r22, 0x00	; 0
    30f4:	49 2f       	mov	r20, r25
    30f6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    30fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    30fc:	82 95       	swap	r24
    30fe:	86 95       	lsr	r24
    3100:	87 70       	andi	r24, 0x07	; 7
    3102:	98 2f       	mov	r25, r24
    3104:	91 70       	andi	r25, 0x01	; 1
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	61 e0       	ldi	r22, 0x01	; 1
    310a:	49 2f       	mov	r20, r25
    310c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    3110:	8f 85       	ldd	r24, Y+15	; 0x0f
    3112:	82 95       	swap	r24
    3114:	86 95       	lsr	r24
    3116:	86 95       	lsr	r24
    3118:	83 70       	andi	r24, 0x03	; 3
    311a:	98 2f       	mov	r25, r24
    311c:	91 70       	andi	r25, 0x01	; 1
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	62 e0       	ldi	r22, 0x02	; 2
    3122:	49 2f       	mov	r20, r25
    3124:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    3128:	8f 85       	ldd	r24, Y+15	; 0x0f
    312a:	98 2f       	mov	r25, r24
    312c:	99 1f       	adc	r25, r25
    312e:	99 27       	eor	r25, r25
    3130:	99 1f       	adc	r25, r25
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	63 e0       	ldi	r22, 0x03	; 3
    3136:	49 2f       	mov	r20, r25
    3138:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	62 e0       	ldi	r22, 0x02	; 2
    3140:	40 e0       	ldi	r20, 0x00	; 0
    3142:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	62 e0       	ldi	r22, 0x02	; 2
    314a:	41 e0       	ldi	r20, 0x01	; 1
    314c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 0));
    3150:	8f 85       	ldd	r24, Y+15	; 0x0f
    3152:	98 2f       	mov	r25, r24
    3154:	91 70       	andi	r25, 0x01	; 1
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	60 e0       	ldi	r22, 0x00	; 0
    315a:	49 2f       	mov	r20, r25
    315c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 1));
    3160:	8f 85       	ldd	r24, Y+15	; 0x0f
    3162:	86 95       	lsr	r24
    3164:	98 2f       	mov	r25, r24
    3166:	91 70       	andi	r25, 0x01	; 1
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	61 e0       	ldi	r22, 0x01	; 1
    316c:	49 2f       	mov	r20, r25
    316e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 2));
    3172:	8f 85       	ldd	r24, Y+15	; 0x0f
    3174:	86 95       	lsr	r24
    3176:	86 95       	lsr	r24
    3178:	98 2f       	mov	r25, r24
    317a:	91 70       	andi	r25, 0x01	; 1
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	62 e0       	ldi	r22, 0x02	; 2
    3180:	49 2f       	mov	r20, r25
    3182:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 3));
    3186:	8f 85       	ldd	r24, Y+15	; 0x0f
    3188:	86 95       	lsr	r24
    318a:	86 95       	lsr	r24
    318c:	86 95       	lsr	r24
    318e:	98 2f       	mov	r25, r24
    3190:	91 70       	andi	r25, 0x01	; 1
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	63 e0       	ldi	r22, 0x03	; 3
    3196:	49 2f       	mov	r20, r25
    3198:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	62 e0       	ldi	r22, 0x02	; 2
    31a0:	40 e0       	ldi	r20, 0x00	; 0
    31a2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	a0 ea       	ldi	r26, 0xA0	; 160
    31ac:	b0 e4       	ldi	r27, 0x40	; 64
    31ae:	8b 87       	std	Y+11, r24	; 0x0b
    31b0:	9c 87       	std	Y+12, r25	; 0x0c
    31b2:	ad 87       	std	Y+13, r26	; 0x0d
    31b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    31bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a e7       	ldi	r20, 0x7A	; 122
    31c4:	55 e4       	ldi	r21, 0x45	; 69
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	8f 83       	std	Y+7, r24	; 0x07
    31d0:	98 87       	std	Y+8, r25	; 0x08
    31d2:	a9 87       	std	Y+9, r26	; 0x09
    31d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31d6:	6f 81       	ldd	r22, Y+7	; 0x07
    31d8:	78 85       	ldd	r23, Y+8	; 0x08
    31da:	89 85       	ldd	r24, Y+9	; 0x09
    31dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e8       	ldi	r20, 0x80	; 128
    31e4:	5f e3       	ldi	r21, 0x3F	; 63
    31e6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31ea:	88 23       	and	r24, r24
    31ec:	2c f4       	brge	.+10     	; 0x31f8 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
    31f6:	3f c0       	rjmp	.+126    	; 0x3276 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    31f8:	6f 81       	ldd	r22, Y+7	; 0x07
    31fa:	78 85       	ldd	r23, Y+8	; 0x08
    31fc:	89 85       	ldd	r24, Y+9	; 0x09
    31fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	3f ef       	ldi	r19, 0xFF	; 255
    3204:	4f e7       	ldi	r20, 0x7F	; 127
    3206:	57 e4       	ldi	r21, 0x47	; 71
    3208:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    320c:	18 16       	cp	r1, r24
    320e:	4c f5       	brge	.+82     	; 0x3262 <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3210:	6b 85       	ldd	r22, Y+11	; 0x0b
    3212:	7c 85       	ldd	r23, Y+12	; 0x0c
    3214:	8d 85       	ldd	r24, Y+13	; 0x0d
    3216:	9e 85       	ldd	r25, Y+14	; 0x0e
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e2       	ldi	r20, 0x20	; 32
    321e:	51 e4       	ldi	r21, 0x41	; 65
    3220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9e 83       	std	Y+6, r25	; 0x06
    3236:	8d 83       	std	Y+5, r24	; 0x05
    3238:	0f c0       	rjmp	.+30     	; 0x3258 <LCD_voidSendCommand+0x19c>
    323a:	80 e9       	ldi	r24, 0x90	; 144
    323c:	91 e0       	ldi	r25, 0x01	; 1
    323e:	9c 83       	std	Y+4, r25	; 0x04
    3240:	8b 83       	std	Y+3, r24	; 0x03
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	9c 81       	ldd	r25, Y+4	; 0x04
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <LCD_voidSendCommand+0x18a>
    324a:	9c 83       	std	Y+4, r25	; 0x04
    324c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324e:	8d 81       	ldd	r24, Y+5	; 0x05
    3250:	9e 81       	ldd	r25, Y+6	; 0x06
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3258:	8d 81       	ldd	r24, Y+5	; 0x05
    325a:	9e 81       	ldd	r25, Y+6	; 0x06
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	69 f7       	brne	.-38     	; 0x323a <LCD_voidSendCommand+0x17e>
    3260:	14 c0       	rjmp	.+40     	; 0x328a <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	6f 81       	ldd	r22, Y+7	; 0x07
    3264:	78 85       	ldd	r23, Y+8	; 0x08
    3266:	89 85       	ldd	r24, Y+9	; 0x09
    3268:	9a 85       	ldd	r25, Y+10	; 0x0a
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9e 83       	std	Y+6, r25	; 0x06
    3274:	8d 83       	std	Y+5, r24	; 0x05
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	9e 81       	ldd	r25, Y+6	; 0x06
    327a:	9a 83       	std	Y+2, r25	; 0x02
    327c:	89 83       	std	Y+1, r24	; 0x01
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	9a 81       	ldd	r25, Y+2	; 0x02
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <LCD_voidSendCommand+0x1c6>
    3286:	9a 83       	std	Y+2, r25	; 0x02
    3288:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    328a:	2f 96       	adiw	r28, 0x0f	; 15
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	2f 97       	sbiw	r28, 0x0f	; 15
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	63 e0       	ldi	r22, 0x03	; 3
    32b6:	40 e0       	ldi	r20, 0x00	; 0
    32b8:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	62 e0       	ldi	r22, 0x02	; 2
    32c0:	41 e0       	ldi	r20, 0x01	; 1
    32c2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    32c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32c8:	82 95       	swap	r24
    32ca:	8f 70       	andi	r24, 0x0F	; 15
    32cc:	98 2f       	mov	r25, r24
    32ce:	91 70       	andi	r25, 0x01	; 1
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	60 e0       	ldi	r22, 0x00	; 0
    32d4:	49 2f       	mov	r20, r25
    32d6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    32da:	8f 85       	ldd	r24, Y+15	; 0x0f
    32dc:	82 95       	swap	r24
    32de:	86 95       	lsr	r24
    32e0:	87 70       	andi	r24, 0x07	; 7
    32e2:	98 2f       	mov	r25, r24
    32e4:	91 70       	andi	r25, 0x01	; 1
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	61 e0       	ldi	r22, 0x01	; 1
    32ea:	49 2f       	mov	r20, r25
    32ec:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    32f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32f2:	82 95       	swap	r24
    32f4:	86 95       	lsr	r24
    32f6:	86 95       	lsr	r24
    32f8:	83 70       	andi	r24, 0x03	; 3
    32fa:	98 2f       	mov	r25, r24
    32fc:	91 70       	andi	r25, 0x01	; 1
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	62 e0       	ldi	r22, 0x02	; 2
    3302:	49 2f       	mov	r20, r25
    3304:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    3308:	8f 85       	ldd	r24, Y+15	; 0x0f
    330a:	98 2f       	mov	r25, r24
    330c:	99 1f       	adc	r25, r25
    330e:	99 27       	eor	r25, r25
    3310:	99 1f       	adc	r25, r25
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	63 e0       	ldi	r22, 0x03	; 3
    3316:	49 2f       	mov	r20, r25
    3318:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	62 e0       	ldi	r22, 0x02	; 2
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	a0 ea       	ldi	r26, 0xA0	; 160
    332c:	b0 e4       	ldi	r27, 0x40	; 64
    332e:	8b 87       	std	Y+11, r24	; 0x0b
    3330:	9c 87       	std	Y+12, r25	; 0x0c
    3332:	ad 87       	std	Y+13, r26	; 0x0d
    3334:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3336:	6b 85       	ldd	r22, Y+11	; 0x0b
    3338:	7c 85       	ldd	r23, Y+12	; 0x0c
    333a:	8d 85       	ldd	r24, Y+13	; 0x0d
    333c:	9e 85       	ldd	r25, Y+14	; 0x0e
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	4a e7       	ldi	r20, 0x7A	; 122
    3344:	55 e4       	ldi	r21, 0x45	; 69
    3346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	8f 83       	std	Y+7, r24	; 0x07
    3350:	98 87       	std	Y+8, r25	; 0x08
    3352:	a9 87       	std	Y+9, r26	; 0x09
    3354:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3356:	6f 81       	ldd	r22, Y+7	; 0x07
    3358:	78 85       	ldd	r23, Y+8	; 0x08
    335a:	89 85       	ldd	r24, Y+9	; 0x09
    335c:	9a 85       	ldd	r25, Y+10	; 0x0a
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	40 e8       	ldi	r20, 0x80	; 128
    3364:	5f e3       	ldi	r21, 0x3F	; 63
    3366:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    336a:	88 23       	and	r24, r24
    336c:	2c f4       	brge	.+10     	; 0x3378 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	9e 83       	std	Y+6, r25	; 0x06
    3374:	8d 83       	std	Y+5, r24	; 0x05
    3376:	3f c0       	rjmp	.+126    	; 0x33f6 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    3378:	6f 81       	ldd	r22, Y+7	; 0x07
    337a:	78 85       	ldd	r23, Y+8	; 0x08
    337c:	89 85       	ldd	r24, Y+9	; 0x09
    337e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	3f ef       	ldi	r19, 0xFF	; 255
    3384:	4f e7       	ldi	r20, 0x7F	; 127
    3386:	57 e4       	ldi	r21, 0x47	; 71
    3388:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    338c:	18 16       	cp	r1, r24
    338e:	4c f5       	brge	.+82     	; 0x33e2 <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3390:	6b 85       	ldd	r22, Y+11	; 0x0b
    3392:	7c 85       	ldd	r23, Y+12	; 0x0c
    3394:	8d 85       	ldd	r24, Y+13	; 0x0d
    3396:	9e 85       	ldd	r25, Y+14	; 0x0e
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	40 e2       	ldi	r20, 0x20	; 32
    339e:	51 e4       	ldi	r21, 0x41	; 65
    33a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	bc 01       	movw	r22, r24
    33aa:	cd 01       	movw	r24, r26
    33ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	9e 83       	std	Y+6, r25	; 0x06
    33b6:	8d 83       	std	Y+5, r24	; 0x05
    33b8:	0f c0       	rjmp	.+30     	; 0x33d8 <LCD_voidSendInitCommand+0x13c>
    33ba:	80 e9       	ldi	r24, 0x90	; 144
    33bc:	91 e0       	ldi	r25, 0x01	; 1
    33be:	9c 83       	std	Y+4, r25	; 0x04
    33c0:	8b 83       	std	Y+3, r24	; 0x03
    33c2:	8b 81       	ldd	r24, Y+3	; 0x03
    33c4:	9c 81       	ldd	r25, Y+4	; 0x04
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <LCD_voidSendInitCommand+0x12a>
    33ca:	9c 83       	std	Y+4, r25	; 0x04
    33cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ce:	8d 81       	ldd	r24, Y+5	; 0x05
    33d0:	9e 81       	ldd	r25, Y+6	; 0x06
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	9e 83       	std	Y+6, r25	; 0x06
    33d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d8:	8d 81       	ldd	r24, Y+5	; 0x05
    33da:	9e 81       	ldd	r25, Y+6	; 0x06
    33dc:	00 97       	sbiw	r24, 0x00	; 0
    33de:	69 f7       	brne	.-38     	; 0x33ba <LCD_voidSendInitCommand+0x11e>
    33e0:	14 c0       	rjmp	.+40     	; 0x340a <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e2:	6f 81       	ldd	r22, Y+7	; 0x07
    33e4:	78 85       	ldd	r23, Y+8	; 0x08
    33e6:	89 85       	ldd	r24, Y+9	; 0x09
    33e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	9e 83       	std	Y+6, r25	; 0x06
    33f4:	8d 83       	std	Y+5, r24	; 0x05
    33f6:	8d 81       	ldd	r24, Y+5	; 0x05
    33f8:	9e 81       	ldd	r25, Y+6	; 0x06
    33fa:	9a 83       	std	Y+2, r25	; 0x02
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
    3400:	9a 81       	ldd	r25, Y+2	; 0x02
    3402:	01 97       	sbiw	r24, 0x01	; 1
    3404:	f1 f7       	brne	.-4      	; 0x3402 <LCD_voidSendInitCommand+0x166>
    3406:	9a 83       	std	Y+2, r25	; 0x02
    3408:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    340a:	2f 96       	adiw	r28, 0x0f	; 15
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	08 95       	ret

0000341c <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    341c:	df 93       	push	r29
    341e:	cf 93       	push	r28
    3420:	cd b7       	in	r28, 0x3d	; 61
    3422:	de b7       	in	r29, 0x3e	; 62
    3424:	2f 97       	sbiw	r28, 0x0f	; 15
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_HIGH); //RS = 0
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	63 e0       	ldi	r22, 0x03	; 3
    3436:	41 e0       	ldi	r20, 0x01	; 1
    3438:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	62 e0       	ldi	r22, 0x02	; 2
    3440:	41 e0       	ldi	r20, 0x01	; 1
    3442:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(data, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(data, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(data, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(data, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 4));
    3446:	8f 85       	ldd	r24, Y+15	; 0x0f
    3448:	82 95       	swap	r24
    344a:	8f 70       	andi	r24, 0x0F	; 15
    344c:	98 2f       	mov	r25, r24
    344e:	91 70       	andi	r25, 0x01	; 1
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	60 e0       	ldi	r22, 0x00	; 0
    3454:	49 2f       	mov	r20, r25
    3456:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 5));
    345a:	8f 85       	ldd	r24, Y+15	; 0x0f
    345c:	82 95       	swap	r24
    345e:	86 95       	lsr	r24
    3460:	87 70       	andi	r24, 0x07	; 7
    3462:	98 2f       	mov	r25, r24
    3464:	91 70       	andi	r25, 0x01	; 1
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	61 e0       	ldi	r22, 0x01	; 1
    346a:	49 2f       	mov	r20, r25
    346c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 6));
    3470:	8f 85       	ldd	r24, Y+15	; 0x0f
    3472:	82 95       	swap	r24
    3474:	86 95       	lsr	r24
    3476:	86 95       	lsr	r24
    3478:	83 70       	andi	r24, 0x03	; 3
    347a:	98 2f       	mov	r25, r24
    347c:	91 70       	andi	r25, 0x01	; 1
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	62 e0       	ldi	r22, 0x02	; 2
    3482:	49 2f       	mov	r20, r25
    3484:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 7));
    3488:	8f 85       	ldd	r24, Y+15	; 0x0f
    348a:	98 2f       	mov	r25, r24
    348c:	99 1f       	adc	r25, r25
    348e:	99 27       	eor	r25, r25
    3490:	99 1f       	adc	r25, r25
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	63 e0       	ldi	r22, 0x03	; 3
    3496:	49 2f       	mov	r20, r25
    3498:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	62 e0       	ldi	r22, 0x02	; 2
    34a0:	40 e0       	ldi	r20, 0x00	; 0
    34a2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	62 e0       	ldi	r22, 0x02	; 2
    34aa:	41 e0       	ldi	r20, 0x01	; 1
    34ac:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 0));
    34b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    34b2:	98 2f       	mov	r25, r24
    34b4:	91 70       	andi	r25, 0x01	; 1
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	60 e0       	ldi	r22, 0x00	; 0
    34ba:	49 2f       	mov	r20, r25
    34bc:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 1));
    34c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    34c2:	86 95       	lsr	r24
    34c4:	98 2f       	mov	r25, r24
    34c6:	91 70       	andi	r25, 0x01	; 1
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	61 e0       	ldi	r22, 0x01	; 1
    34cc:	49 2f       	mov	r20, r25
    34ce:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 2));
    34d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    34d4:	86 95       	lsr	r24
    34d6:	86 95       	lsr	r24
    34d8:	98 2f       	mov	r25, r24
    34da:	91 70       	andi	r25, 0x01	; 1
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	62 e0       	ldi	r22, 0x02	; 2
    34e0:	49 2f       	mov	r20, r25
    34e2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 3));
    34e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e8:	86 95       	lsr	r24
    34ea:	86 95       	lsr	r24
    34ec:	86 95       	lsr	r24
    34ee:	98 2f       	mov	r25, r24
    34f0:	91 70       	andi	r25, 0x01	; 1
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	63 e0       	ldi	r22, 0x03	; 3
    34f6:	49 2f       	mov	r20, r25
    34f8:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	62 e0       	ldi	r22, 0x02	; 2
    3500:	40 e0       	ldi	r20, 0x00	; 0
    3502:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	a0 ea       	ldi	r26, 0xA0	; 160
    350c:	b0 e4       	ldi	r27, 0x40	; 64
    350e:	8b 87       	std	Y+11, r24	; 0x0b
    3510:	9c 87       	std	Y+12, r25	; 0x0c
    3512:	ad 87       	std	Y+13, r26	; 0x0d
    3514:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3516:	6b 85       	ldd	r22, Y+11	; 0x0b
    3518:	7c 85       	ldd	r23, Y+12	; 0x0c
    351a:	8d 85       	ldd	r24, Y+13	; 0x0d
    351c:	9e 85       	ldd	r25, Y+14	; 0x0e
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	4a e7       	ldi	r20, 0x7A	; 122
    3524:	55 e4       	ldi	r21, 0x45	; 69
    3526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	8f 83       	std	Y+7, r24	; 0x07
    3530:	98 87       	std	Y+8, r25	; 0x08
    3532:	a9 87       	std	Y+9, r26	; 0x09
    3534:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3536:	6f 81       	ldd	r22, Y+7	; 0x07
    3538:	78 85       	ldd	r23, Y+8	; 0x08
    353a:	89 85       	ldd	r24, Y+9	; 0x09
    353c:	9a 85       	ldd	r25, Y+10	; 0x0a
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e8       	ldi	r20, 0x80	; 128
    3544:	5f e3       	ldi	r21, 0x3F	; 63
    3546:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    354a:	88 23       	and	r24, r24
    354c:	2c f4       	brge	.+10     	; 0x3558 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	9e 83       	std	Y+6, r25	; 0x06
    3554:	8d 83       	std	Y+5, r24	; 0x05
    3556:	3f c0       	rjmp	.+126    	; 0x35d6 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    3558:	6f 81       	ldd	r22, Y+7	; 0x07
    355a:	78 85       	ldd	r23, Y+8	; 0x08
    355c:	89 85       	ldd	r24, Y+9	; 0x09
    355e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	3f ef       	ldi	r19, 0xFF	; 255
    3564:	4f e7       	ldi	r20, 0x7F	; 127
    3566:	57 e4       	ldi	r21, 0x47	; 71
    3568:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    356c:	18 16       	cp	r1, r24
    356e:	4c f5       	brge	.+82     	; 0x35c2 <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3570:	6b 85       	ldd	r22, Y+11	; 0x0b
    3572:	7c 85       	ldd	r23, Y+12	; 0x0c
    3574:	8d 85       	ldd	r24, Y+13	; 0x0d
    3576:	9e 85       	ldd	r25, Y+14	; 0x0e
    3578:	20 e0       	ldi	r18, 0x00	; 0
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	40 e2       	ldi	r20, 0x20	; 32
    357e:	51 e4       	ldi	r21, 0x41	; 65
    3580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	bc 01       	movw	r22, r24
    358a:	cd 01       	movw	r24, r26
    358c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	9e 83       	std	Y+6, r25	; 0x06
    3596:	8d 83       	std	Y+5, r24	; 0x05
    3598:	0f c0       	rjmp	.+30     	; 0x35b8 <LCD_voidWriteChar+0x19c>
    359a:	80 e9       	ldi	r24, 0x90	; 144
    359c:	91 e0       	ldi	r25, 0x01	; 1
    359e:	9c 83       	std	Y+4, r25	; 0x04
    35a0:	8b 83       	std	Y+3, r24	; 0x03
    35a2:	8b 81       	ldd	r24, Y+3	; 0x03
    35a4:	9c 81       	ldd	r25, Y+4	; 0x04
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	f1 f7       	brne	.-4      	; 0x35a6 <LCD_voidWriteChar+0x18a>
    35aa:	9c 83       	std	Y+4, r25	; 0x04
    35ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ae:	8d 81       	ldd	r24, Y+5	; 0x05
    35b0:	9e 81       	ldd	r25, Y+6	; 0x06
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	9e 83       	std	Y+6, r25	; 0x06
    35b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ba:	9e 81       	ldd	r25, Y+6	; 0x06
    35bc:	00 97       	sbiw	r24, 0x00	; 0
    35be:	69 f7       	brne	.-38     	; 0x359a <LCD_voidWriteChar+0x17e>
    35c0:	14 c0       	rjmp	.+40     	; 0x35ea <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c2:	6f 81       	ldd	r22, Y+7	; 0x07
    35c4:	78 85       	ldd	r23, Y+8	; 0x08
    35c6:	89 85       	ldd	r24, Y+9	; 0x09
    35c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	9e 83       	std	Y+6, r25	; 0x06
    35d4:	8d 83       	std	Y+5, r24	; 0x05
    35d6:	8d 81       	ldd	r24, Y+5	; 0x05
    35d8:	9e 81       	ldd	r25, Y+6	; 0x06
    35da:	9a 83       	std	Y+2, r25	; 0x02
    35dc:	89 83       	std	Y+1, r24	; 0x01
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	9a 81       	ldd	r25, Y+2	; 0x02
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	f1 f7       	brne	.-4      	; 0x35e2 <LCD_voidWriteChar+0x1c6>
    35e6:	9a 83       	std	Y+2, r25	; 0x02
    35e8:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    35ea:	2f 96       	adiw	r28, 0x0f	; 15
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	f8 94       	cli
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	cd bf       	out	0x3d, r28	; 61
    35f6:	cf 91       	pop	r28
    35f8:	df 91       	pop	r29
    35fa:	08 95       	ret

000035fc <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	00 d0       	rcall	.+0      	; 0x3602 <LCD_voidWriteString+0x6>
    3602:	0f 92       	push	r0
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	9b 83       	std	Y+3, r25	; 0x03
    360a:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    360c:	19 82       	std	Y+1, r1	; 0x01
    360e:	0e c0       	rjmp	.+28     	; 0x362c <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	28 2f       	mov	r18, r24
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	9b 81       	ldd	r25, Y+3	; 0x03
    361a:	fc 01       	movw	r30, r24
    361c:	e2 0f       	add	r30, r18
    361e:	f3 1f       	adc	r31, r19
    3620:	80 81       	ld	r24, Z
    3622:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_voidWriteChar>
		index++;
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	8f 5f       	subi	r24, 0xFF	; 255
    362a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    362c:	89 81       	ldd	r24, Y+1	; 0x01
    362e:	28 2f       	mov	r18, r24
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	8a 81       	ldd	r24, Y+2	; 0x02
    3634:	9b 81       	ldd	r25, Y+3	; 0x03
    3636:	fc 01       	movw	r30, r24
    3638:	e2 0f       	add	r30, r18
    363a:	f3 1f       	adc	r31, r19
    363c:	80 81       	ld	r24, Z
    363e:	88 23       	and	r24, r24
    3640:	39 f7       	brne	.-50     	; 0x3610 <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	0f 90       	pop	r0
    3648:	cf 91       	pop	r28
    364a:	df 91       	pop	r29
    364c:	08 95       	ret

0000364e <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    364e:	0f 93       	push	r16
    3650:	1f 93       	push	r17
    3652:	df 93       	push	r29
    3654:	cf 93       	push	r28
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
    365a:	2e 97       	sbiw	r28, 0x0e	; 14
    365c:	0f b6       	in	r0, 0x3f	; 63
    365e:	f8 94       	cli
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	cd bf       	out	0x3d, r28	; 61
    3666:	69 87       	std	Y+9, r22	; 0x09
    3668:	7a 87       	std	Y+10, r23	; 0x0a
    366a:	8b 87       	std	Y+11, r24	; 0x0b
    366c:	9c 87       	std	Y+12, r25	; 0x0c
    366e:	5e 87       	std	Y+14, r21	; 0x0e
    3670:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    3672:	1d 82       	std	Y+5, r1	; 0x05
    3674:	1e 82       	std	Y+6, r1	; 0x06
    3676:	1f 82       	std	Y+7, r1	; 0x07
    3678:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    367a:	83 e1       	ldi	r24, 0x13	; 19
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	a0 e0       	ldi	r26, 0x00	; 0
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	89 83       	std	Y+1, r24	; 0x01
    3684:	9a 83       	std	Y+2, r25	; 0x02
    3686:	ab 83       	std	Y+3, r26	; 0x03
    3688:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    368a:	29 81       	ldd	r18, Y+1	; 0x01
    368c:	3a 81       	ldd	r19, Y+2	; 0x02
    368e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3690:	9e 85       	ldd	r25, Y+14	; 0x0e
    3692:	fc 01       	movw	r30, r24
    3694:	e2 0f       	add	r30, r18
    3696:	f3 1f       	adc	r31, r19
    3698:	10 82       	st	Z, r1
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	9a 81       	ldd	r25, Y+2	; 0x02
    369e:	ab 81       	ldd	r26, Y+3	; 0x03
    36a0:	bc 81       	ldd	r27, Y+4	; 0x04
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	a1 09       	sbc	r26, r1
    36a6:	b1 09       	sbc	r27, r1
    36a8:	89 83       	std	Y+1, r24	; 0x01
    36aa:	9a 83       	std	Y+2, r25	; 0x02
    36ac:	ab 83       	std	Y+3, r26	; 0x03
    36ae:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    36b0:	89 85       	ldd	r24, Y+9	; 0x09
    36b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b4:	ab 85       	ldd	r26, Y+11	; 0x0b
    36b6:	bc 85       	ldd	r27, Y+12	; 0x0c
    36b8:	bb 23       	and	r27, r27
    36ba:	0c f0       	brlt	.+2      	; 0x36be <IntToString+0x70>
    36bc:	4d c0       	rjmp	.+154    	; 0x3758 <IntToString+0x10a>
		flag = 1;
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	a0 e0       	ldi	r26, 0x00	; 0
    36c4:	b0 e0       	ldi	r27, 0x00	; 0
    36c6:	8d 83       	std	Y+5, r24	; 0x05
    36c8:	9e 83       	std	Y+6, r25	; 0x06
    36ca:	af 83       	std	Y+7, r26	; 0x07
    36cc:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    36ce:	89 85       	ldd	r24, Y+9	; 0x09
    36d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d2:	ab 85       	ldd	r26, Y+11	; 0x0b
    36d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    36d6:	b0 95       	com	r27
    36d8:	a0 95       	com	r26
    36da:	90 95       	com	r25
    36dc:	81 95       	neg	r24
    36de:	9f 4f       	sbci	r25, 0xFF	; 255
    36e0:	af 4f       	sbci	r26, 0xFF	; 255
    36e2:	bf 4f       	sbci	r27, 0xFF	; 255
    36e4:	89 87       	std	Y+9, r24	; 0x09
    36e6:	9a 87       	std	Y+10, r25	; 0x0a
    36e8:	ab 87       	std	Y+11, r26	; 0x0b
    36ea:	bc 87       	std	Y+12, r27	; 0x0c
    36ec:	35 c0       	rjmp	.+106    	; 0x3758 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    36ee:	29 81       	ldd	r18, Y+1	; 0x01
    36f0:	3a 81       	ldd	r19, Y+2	; 0x02
    36f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36f6:	8c 01       	movw	r16, r24
    36f8:	02 0f       	add	r16, r18
    36fa:	13 1f       	adc	r17, r19
    36fc:	89 85       	ldd	r24, Y+9	; 0x09
    36fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3700:	ab 85       	ldd	r26, Y+11	; 0x0b
    3702:	bc 85       	ldd	r27, Y+12	; 0x0c
    3704:	2a e0       	ldi	r18, 0x0A	; 10
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e0       	ldi	r20, 0x00	; 0
    370a:	50 e0       	ldi	r21, 0x00	; 0
    370c:	bc 01       	movw	r22, r24
    370e:	cd 01       	movw	r24, r26
    3710:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <__divmodsi4>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	80 5d       	subi	r24, 0xD0	; 208
    371a:	f8 01       	movw	r30, r16
    371c:	80 83       	st	Z, r24
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	9a 81       	ldd	r25, Y+2	; 0x02
    3722:	ab 81       	ldd	r26, Y+3	; 0x03
    3724:	bc 81       	ldd	r27, Y+4	; 0x04
    3726:	01 97       	sbiw	r24, 0x01	; 1
    3728:	a1 09       	sbc	r26, r1
    372a:	b1 09       	sbc	r27, r1
    372c:	89 83       	std	Y+1, r24	; 0x01
    372e:	9a 83       	std	Y+2, r25	; 0x02
    3730:	ab 83       	std	Y+3, r26	; 0x03
    3732:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    3734:	89 85       	ldd	r24, Y+9	; 0x09
    3736:	9a 85       	ldd	r25, Y+10	; 0x0a
    3738:	ab 85       	ldd	r26, Y+11	; 0x0b
    373a:	bc 85       	ldd	r27, Y+12	; 0x0c
    373c:	2a e0       	ldi	r18, 0x0A	; 10
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e0       	ldi	r20, 0x00	; 0
    3742:	50 e0       	ldi	r21, 0x00	; 0
    3744:	bc 01       	movw	r22, r24
    3746:	cd 01       	movw	r24, r26
    3748:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <__divmodsi4>
    374c:	da 01       	movw	r26, r20
    374e:	c9 01       	movw	r24, r18
    3750:	89 87       	std	Y+9, r24	; 0x09
    3752:	9a 87       	std	Y+10, r25	; 0x0a
    3754:	ab 87       	std	Y+11, r26	; 0x0b
    3756:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    3758:	89 85       	ldd	r24, Y+9	; 0x09
    375a:	9a 85       	ldd	r25, Y+10	; 0x0a
    375c:	ab 85       	ldd	r26, Y+11	; 0x0b
    375e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3760:	00 97       	sbiw	r24, 0x00	; 0
    3762:	a1 05       	cpc	r26, r1
    3764:	b1 05       	cpc	r27, r1
    3766:	19 f6       	brne	.-122    	; 0x36ee <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    3768:	8d 81       	ldd	r24, Y+5	; 0x05
    376a:	9e 81       	ldd	r25, Y+6	; 0x06
    376c:	af 81       	ldd	r26, Y+7	; 0x07
    376e:	b8 85       	ldd	r27, Y+8	; 0x08
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	a1 05       	cpc	r26, r1
    3774:	b1 05       	cpc	r27, r1
    3776:	a1 f0       	breq	.+40     	; 0x37a0 <IntToString+0x152>
		str[i--] = '-';
    3778:	29 81       	ldd	r18, Y+1	; 0x01
    377a:	3a 81       	ldd	r19, Y+2	; 0x02
    377c:	8d 85       	ldd	r24, Y+13	; 0x0d
    377e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3780:	fc 01       	movw	r30, r24
    3782:	e2 0f       	add	r30, r18
    3784:	f3 1f       	adc	r31, r19
    3786:	8d e2       	ldi	r24, 0x2D	; 45
    3788:	80 83       	st	Z, r24
    378a:	89 81       	ldd	r24, Y+1	; 0x01
    378c:	9a 81       	ldd	r25, Y+2	; 0x02
    378e:	ab 81       	ldd	r26, Y+3	; 0x03
    3790:	bc 81       	ldd	r27, Y+4	; 0x04
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	a1 09       	sbc	r26, r1
    3796:	b1 09       	sbc	r27, r1
    3798:	89 83       	std	Y+1, r24	; 0x01
    379a:	9a 83       	std	Y+2, r25	; 0x02
    379c:	ab 83       	std	Y+3, r26	; 0x03
    379e:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	9a 81       	ldd	r25, Y+2	; 0x02
    37a4:	ab 81       	ldd	r26, Y+3	; 0x03
    37a6:	bc 81       	ldd	r27, Y+4	; 0x04
    37a8:	01 96       	adiw	r24, 0x01	; 1
    37aa:	a1 1d       	adc	r26, r1
    37ac:	b1 1d       	adc	r27, r1
    37ae:	89 83       	std	Y+1, r24	; 0x01
    37b0:	9a 83       	std	Y+2, r25	; 0x02
    37b2:	ab 83       	std	Y+3, r26	; 0x03
    37b4:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    37b6:	29 81       	ldd	r18, Y+1	; 0x01
    37b8:	3a 81       	ldd	r19, Y+2	; 0x02
    37ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    37bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37be:	82 0f       	add	r24, r18
    37c0:	93 1f       	adc	r25, r19

}
    37c2:	2e 96       	adiw	r28, 0x0e	; 14
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	cf 91       	pop	r28
    37d0:	df 91       	pop	r29
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	08 95       	ret

000037d8 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
    37e0:	6a 97       	sbiw	r28, 0x1a	; 26
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
    37ec:	6f 8b       	std	Y+23, r22	; 0x17
    37ee:	78 8f       	std	Y+24, r23	; 0x18
    37f0:	89 8f       	std	Y+25, r24	; 0x19
    37f2:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    37f4:	8f 89       	ldd	r24, Y+23	; 0x17
    37f6:	98 8d       	ldd	r25, Y+24	; 0x18
    37f8:	a9 8d       	ldd	r26, Y+25	; 0x19
    37fa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	a1 05       	cpc	r26, r1
    3800:	b1 05       	cpc	r27, r1
    3802:	99 f0       	breq	.+38     	; 0x382a <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    3804:	8f 89       	ldd	r24, Y+23	; 0x17
    3806:	98 8d       	ldd	r25, Y+24	; 0x18
    3808:	a9 8d       	ldd	r26, Y+25	; 0x19
    380a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    380c:	9e 01       	movw	r18, r28
    380e:	2d 5f       	subi	r18, 0xFD	; 253
    3810:	3f 4f       	sbci	r19, 0xFF	; 255
    3812:	bc 01       	movw	r22, r24
    3814:	cd 01       	movw	r24, r26
    3816:	a9 01       	movw	r20, r18
    3818:	0e 94 27 1b 	call	0x364e	; 0x364e <IntToString>
    381c:	9a 83       	std	Y+2, r25	; 0x02
    381e:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	9a 81       	ldd	r25, Y+2	; 0x02
    3824:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidWriteString>
    3828:	03 c0       	rjmp	.+6      	; 0x3830 <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    382a:	80 e3       	ldi	r24, 0x30	; 48
    382c:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_voidWriteChar>
	}
}
    3830:	6a 96       	adiw	r28, 0x1a	; 26
    3832:	0f b6       	in	r0, 0x3f	; 63
    3834:	f8 94       	cli
    3836:	de bf       	out	0x3e, r29	; 62
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	cd bf       	out	0x3d, r28	; 61
    383c:	cf 91       	pop	r28
    383e:	df 91       	pop	r29
    3840:	08 95       	ret

00003842 <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    3842:	df 93       	push	r29
    3844:	cf 93       	push	r28
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	a6 97       	sbiw	r28, 0x26	; 38
    384c:	0f b6       	in	r0, 0x3f	; 63
    384e:	f8 94       	cli
    3850:	de bf       	out	0x3e, r29	; 62
    3852:	0f be       	out	0x3f, r0	; 63
    3854:	cd bf       	out	0x3d, r28	; 61
    3856:	6b a3       	std	Y+35, r22	; 0x23
    3858:	7c a3       	std	Y+36, r23	; 0x24
    385a:	8d a3       	std	Y+37, r24	; 0x25
    385c:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    385e:	6b a1       	ldd	r22, Y+35	; 0x23
    3860:	7c a1       	ldd	r23, Y+36	; 0x24
    3862:	8d a1       	ldd	r24, Y+37	; 0x25
    3864:	9e a1       	ldd	r25, Y+38	; 0x26
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	48 ec       	ldi	r20, 0xC8	; 200
    386c:	52 e4       	ldi	r21, 0x42	; 66
    386e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	bc 01       	movw	r22, r24
    3878:	cd 01       	movw	r24, r26
    387a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	8b 87       	std	Y+11, r24	; 0x0b
    3884:	9c 87       	std	Y+12, r25	; 0x0c
    3886:	ad 87       	std	Y+13, r26	; 0x0d
    3888:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    388a:	8b 85       	ldd	r24, Y+11	; 0x0b
    388c:	9c 85       	ldd	r25, Y+12	; 0x0c
    388e:	ad 85       	ldd	r26, Y+13	; 0x0d
    3890:	be 85       	ldd	r27, Y+14	; 0x0e
    3892:	9e 01       	movw	r18, r28
    3894:	21 5f       	subi	r18, 0xF1	; 241
    3896:	3f 4f       	sbci	r19, 0xFF	; 255
    3898:	bc 01       	movw	r22, r24
    389a:	cd 01       	movw	r24, r26
    389c:	a9 01       	movw	r20, r18
    389e:	0e 94 27 1b 	call	0x364e	; 0x364e <IntToString>
    38a2:	9a 87       	std	Y+10, r25	; 0x0a
    38a4:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    38a6:	1d 82       	std	Y+5, r1	; 0x05
    38a8:	1e 82       	std	Y+6, r1	; 0x06
    38aa:	1f 82       	std	Y+7, r1	; 0x07
    38ac:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    38ae:	19 82       	std	Y+1, r1	; 0x01
    38b0:	1a 82       	std	Y+2, r1	; 0x02
    38b2:	1b 82       	std	Y+3, r1	; 0x03
    38b4:	1c 82       	std	Y+4, r1	; 0x04
    38b6:	0b c0       	rjmp	.+22     	; 0x38ce <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    38b8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ba:	9e 81       	ldd	r25, Y+6	; 0x06
    38bc:	af 81       	ldd	r26, Y+7	; 0x07
    38be:	b8 85       	ldd	r27, Y+8	; 0x08
    38c0:	01 96       	adiw	r24, 0x01	; 1
    38c2:	a1 1d       	adc	r26, r1
    38c4:	b1 1d       	adc	r27, r1
    38c6:	8d 83       	std	Y+5, r24	; 0x05
    38c8:	9e 83       	std	Y+6, r25	; 0x06
    38ca:	af 83       	std	Y+7, r26	; 0x07
    38cc:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    38ce:	2d 81       	ldd	r18, Y+5	; 0x05
    38d0:	3e 81       	ldd	r19, Y+6	; 0x06
    38d2:	89 85       	ldd	r24, Y+9	; 0x09
    38d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d6:	fc 01       	movw	r30, r24
    38d8:	e2 0f       	add	r30, r18
    38da:	f3 1f       	adc	r31, r19
    38dc:	80 81       	ld	r24, Z
    38de:	88 23       	and	r24, r24
    38e0:	59 f7       	brne	.-42     	; 0x38b8 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    38e2:	8d 81       	ldd	r24, Y+5	; 0x05
    38e4:	9e 81       	ldd	r25, Y+6	; 0x06
    38e6:	af 81       	ldd	r26, Y+7	; 0x07
    38e8:	b8 85       	ldd	r27, Y+8	; 0x08
    38ea:	02 97       	sbiw	r24, 0x02	; 2
    38ec:	a1 09       	sbc	r26, r1
    38ee:	b1 09       	sbc	r27, r1
    38f0:	8d 83       	std	Y+5, r24	; 0x05
    38f2:	9e 83       	std	Y+6, r25	; 0x06
    38f4:	af 83       	std	Y+7, r26	; 0x07
    38f6:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    38f8:	8d 81       	ldd	r24, Y+5	; 0x05
    38fa:	9e 81       	ldd	r25, Y+6	; 0x06
    38fc:	af 81       	ldd	r26, Y+7	; 0x07
    38fe:	b8 85       	ldd	r27, Y+8	; 0x08
    3900:	00 97       	sbiw	r24, 0x00	; 0
    3902:	a1 05       	cpc	r26, r1
    3904:	b1 05       	cpc	r27, r1
    3906:	49 f5       	brne	.+82     	; 0x395a <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    3908:	80 e3       	ldi	r24, 0x30	; 48
    390a:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_voidWriteChar>
    390e:	25 c0       	rjmp	.+74     	; 0x395a <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    3910:	29 81       	ldd	r18, Y+1	; 0x01
    3912:	3a 81       	ldd	r19, Y+2	; 0x02
    3914:	4b 81       	ldd	r20, Y+3	; 0x03
    3916:	5c 81       	ldd	r21, Y+4	; 0x04
    3918:	8d 81       	ldd	r24, Y+5	; 0x05
    391a:	9e 81       	ldd	r25, Y+6	; 0x06
    391c:	af 81       	ldd	r26, Y+7	; 0x07
    391e:	b8 85       	ldd	r27, Y+8	; 0x08
    3920:	28 17       	cp	r18, r24
    3922:	39 07       	cpc	r19, r25
    3924:	4a 07       	cpc	r20, r26
    3926:	5b 07       	cpc	r21, r27
    3928:	19 f4       	brne	.+6      	; 0x3930 <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    392a:	8e e2       	ldi	r24, 0x2E	; 46
    392c:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    3930:	29 81       	ldd	r18, Y+1	; 0x01
    3932:	3a 81       	ldd	r19, Y+2	; 0x02
    3934:	89 85       	ldd	r24, Y+9	; 0x09
    3936:	9a 85       	ldd	r25, Y+10	; 0x0a
    3938:	fc 01       	movw	r30, r24
    393a:	e2 0f       	add	r30, r18
    393c:	f3 1f       	adc	r31, r19
    393e:	80 81       	ld	r24, Z
    3940:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_voidWriteChar>
		counter2++;
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	9a 81       	ldd	r25, Y+2	; 0x02
    3948:	ab 81       	ldd	r26, Y+3	; 0x03
    394a:	bc 81       	ldd	r27, Y+4	; 0x04
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	a1 1d       	adc	r26, r1
    3950:	b1 1d       	adc	r27, r1
    3952:	89 83       	std	Y+1, r24	; 0x01
    3954:	9a 83       	std	Y+2, r25	; 0x02
    3956:	ab 83       	std	Y+3, r26	; 0x03
    3958:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    395a:	29 81       	ldd	r18, Y+1	; 0x01
    395c:	3a 81       	ldd	r19, Y+2	; 0x02
    395e:	89 85       	ldd	r24, Y+9	; 0x09
    3960:	9a 85       	ldd	r25, Y+10	; 0x0a
    3962:	fc 01       	movw	r30, r24
    3964:	e2 0f       	add	r30, r18
    3966:	f3 1f       	adc	r31, r19
    3968:	80 81       	ld	r24, Z
    396a:	88 23       	and	r24, r24
    396c:	89 f6       	brne	.-94     	; 0x3910 <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    396e:	a6 96       	adiw	r28, 0x26	; 38
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	de bf       	out	0x3e, r29	; 62
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	cd bf       	out	0x3d, r28	; 61
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	08 95       	ret

00003980 <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	00 d0       	rcall	.+0      	; 0x3986 <LCD_voidGoToPosition+0x6>
    3986:	0f 92       	push	r0
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
    398c:	8a 83       	std	Y+2, r24	; 0x02
    398e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    3990:	80 e8       	ldi	r24, 0x80	; 128
    3992:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    3994:	8a 81       	ldd	r24, Y+2	; 0x02
    3996:	88 23       	and	r24, r24
    3998:	21 f4       	brne	.+8      	; 0x39a2 <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    399a:	8b 81       	ldd	r24, Y+3	; 0x03
    399c:	80 58       	subi	r24, 0x80	; 128
    399e:	89 83       	std	Y+1, r24	; 0x01
    39a0:	14 c0       	rjmp	.+40     	; 0x39ca <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    39a2:	8a 81       	ldd	r24, Y+2	; 0x02
    39a4:	81 30       	cpi	r24, 0x01	; 1
    39a6:	21 f4       	brne	.+8      	; 0x39b0 <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    39a8:	8b 81       	ldd	r24, Y+3	; 0x03
    39aa:	80 54       	subi	r24, 0x40	; 64
    39ac:	89 83       	std	Y+1, r24	; 0x01
    39ae:	0d c0       	rjmp	.+26     	; 0x39ca <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    39b0:	8a 81       	ldd	r24, Y+2	; 0x02
    39b2:	82 30       	cpi	r24, 0x02	; 2
    39b4:	21 f4       	brne	.+8      	; 0x39be <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    39b6:	8b 81       	ldd	r24, Y+3	; 0x03
    39b8:	8c 56       	subi	r24, 0x6C	; 108
    39ba:	89 83       	std	Y+1, r24	; 0x01
    39bc:	06 c0       	rjmp	.+12     	; 0x39ca <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    39be:	8a 81       	ldd	r24, Y+2	; 0x02
    39c0:	83 30       	cpi	r24, 0x03	; 3
    39c2:	19 f4       	brne	.+6      	; 0x39ca <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    39c4:	8b 81       	ldd	r24, Y+3	; 0x03
    39c6:	8c 52       	subi	r24, 0x2C	; 44
    39c8:	89 83       	std	Y+1, r24	; 0x01
	}

	Set_Bit(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    39ca:	89 81       	ldd	r24, Y+1	; 0x01
    39cc:	80 68       	ori	r24, 0x80	; 128
    39ce:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	0e 94 5e 18 	call	0x30bc	; 0x30bc <LCD_voidSendCommand>
}
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
    39da:	0f 90       	pop	r0
    39dc:	cf 91       	pop	r28
    39de:	df 91       	pop	r29
    39e0:	08 95       	ret

000039e2 <LCD_voidClear>:

void LCD_voidClear(u8 X_Position, u8 Y_Position)
{
    39e2:	df 93       	push	r29
    39e4:	cf 93       	push	r28
    39e6:	00 d0       	rcall	.+0      	; 0x39e8 <LCD_voidClear+0x6>
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
    39ec:	89 83       	std	Y+1, r24	; 0x01
    39ee:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position,Y_Position);
    39f0:	89 81       	ldd	r24, Y+1	; 0x01
    39f2:	6a 81       	ldd	r22, Y+2	; 0x02
    39f4:	0e 94 c0 1c 	call	0x3980	; 0x3980 <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    39f8:	80 e2       	ldi	r24, 0x20	; 32
    39fa:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_voidWriteChar>
}
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	cf 91       	pop	r28
    3a04:	df 91       	pop	r29
    3a06:	08 95       	ret

00003a08 <LCD_voidClearLine>:
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
    3a08:	df 93       	push	r29
    3a0a:	cf 93       	push	r28
    3a0c:	00 d0       	rcall	.+0      	; 0x3a0e <LCD_voidClearLine+0x6>
    3a0e:	0f 92       	push	r0
    3a10:	cd b7       	in	r28, 0x3d	; 61
    3a12:	de b7       	in	r29, 0x3e	; 62
    3a14:	8a 83       	std	Y+2, r24	; 0x02
    3a16:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 num = 0; num <= Y_Position; num++)
    3a18:	19 82       	std	Y+1, r1	; 0x01
    3a1a:	0a c0       	rjmp	.+20     	; 0x3a30 <LCD_voidClearLine+0x28>
	{
		LCD_voidGoToPosition(X_Position,num);
    3a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1e:	69 81       	ldd	r22, Y+1	; 0x01
    3a20:	0e 94 c0 1c 	call	0x3980	; 0x3980 <LCD_voidGoToPosition>
		LCD_voidWriteChar(' ');
    3a24:	80 e2       	ldi	r24, 0x20	; 32
    3a26:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_voidWriteChar>
	LCD_voidGoToPosition(X_Position,Y_Position);
	LCD_voidWriteChar(' ');
}
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
	for(u8 num = 0; num <= Y_Position; num++)
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
    3a2c:	8f 5f       	subi	r24, 0xFF	; 255
    3a2e:	89 83       	std	Y+1, r24	; 0x01
    3a30:	99 81       	ldd	r25, Y+1	; 0x01
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	89 17       	cp	r24, r25
    3a36:	90 f7       	brcc	.-28     	; 0x3a1c <LCD_voidClearLine+0x14>
	{
		LCD_voidGoToPosition(X_Position,num);
		LCD_voidWriteChar(' ');
	}
}
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	08 95       	ret

00003a44 <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    3a44:	df 93       	push	r29
    3a46:	cf 93       	push	r28
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
    3a4c:	27 97       	sbiw	r28, 0x07	; 7
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	f8 94       	cli
    3a52:	de bf       	out	0x3e, r29	; 62
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	cd bf       	out	0x3d, r28	; 61
    3a58:	9c 83       	std	Y+4, r25	; 0x04
    3a5a:	8b 83       	std	Y+3, r24	; 0x03
    3a5c:	6d 83       	std	Y+5, r22	; 0x05
    3a5e:	4e 83       	std	Y+6, r20	; 0x06
    3a60:	2f 83       	std	Y+7, r18	; 0x07

	LCD_voidGoToPosition(row,column);
    3a62:	8e 81       	ldd	r24, Y+6	; 0x06
    3a64:	6f 81       	ldd	r22, Y+7	; 0x07
    3a66:	0e 94 c0 1c 	call	0x3980	; 0x3980 <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    3a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6c:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_voidWriteChar>
	u8 address = 0;
    3a70:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    3a72:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    3a74:	8d 81       	ldd	r24, Y+5	; 0x05
    3a76:	88 30       	cpi	r24, 0x08	; 8
    3a78:	30 f5       	brcc	.+76     	; 0x3ac6 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    3a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7c:	88 2f       	mov	r24, r24
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	88 0f       	add	r24, r24
    3a82:	99 1f       	adc	r25, r25
    3a84:	88 0f       	add	r24, r24
    3a86:	99 1f       	adc	r25, r25
    3a88:	88 0f       	add	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	8a 83       	std	Y+2, r24	; 0x02
		Set_Bit(address,6);
    3a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a90:	80 64       	ori	r24, 0x40	; 64
    3a92:	8a 83       	std	Y+2, r24	; 0x02
		Clear_Bit(address,7);
    3a94:	8a 81       	ldd	r24, Y+2	; 0x02
    3a96:	8f 77       	andi	r24, 0x7F	; 127
    3a98:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    3a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9c:	0e 94 5e 18 	call	0x30bc	; 0x30bc <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    3aa0:	19 82       	std	Y+1, r1	; 0x01
    3aa2:	0e c0       	rjmp	.+28     	; 0x3ac0 <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	28 2f       	mov	r18, r24
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    3aac:	9c 81       	ldd	r25, Y+4	; 0x04
    3aae:	fc 01       	movw	r30, r24
    3ab0:	e2 0f       	add	r30, r18
    3ab2:	f3 1f       	adc	r31, r19
    3ab4:	80 81       	ld	r24, Z
    3ab6:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		Set_Bit(address,6);
		Clear_Bit(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	8f 5f       	subi	r24, 0xFF	; 255
    3abe:	89 83       	std	Y+1, r24	; 0x01
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	88 30       	cpi	r24, 0x08	; 8
    3ac4:	78 f3       	brcs	.-34     	; 0x3aa4 <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    3ac6:	82 e0       	ldi	r24, 0x02	; 2
    3ac8:	0e 94 5e 18 	call	0x30bc	; 0x30bc <LCD_voidSendCommand>
}
    3acc:	27 96       	adiw	r28, 0x07	; 7
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
    3ad8:	cf 91       	pop	r28
    3ada:	df 91       	pop	r29
    3adc:	08 95       	ret

00003ade <KPD_u8GetPressedKey>:
#include "KPD_Private.h"



u8 KPD_u8GetPressedKey(void)
{
    3ade:	df 93       	push	r29
    3ae0:	cf 93       	push	r28
    3ae2:	00 d0       	rcall	.+0      	; 0x3ae4 <KPD_u8GetPressedKey+0x6>
    3ae4:	00 d0       	rcall	.+0      	; 0x3ae6 <KPD_u8GetPressedKey+0x8>
    3ae6:	0f 92       	push	r0
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    3aec:	8f ef       	ldi	r24, 0xFF	; 255
    3aee:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnIdx, Local_u8RowIdx, Local_u8PinState = 0;
    3af0:	1c 82       	std	Y+4, r1	; 0x04
			KPD_ROW_PIN1,
			KPD_ROW_PIN2,
			KPD_ROW_PIN3
	};

	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
    3af2:	1a 82       	std	Y+2, r1	; 0x02
    3af4:	5e c0       	rjmp	.+188    	; 0x3bb2 <KPD_u8GetPressedKey+0xd4>
	{
		// Activate current column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);
    3af6:	8a 81       	ldd	r24, Y+2	; 0x02
    3af8:	88 2f       	mov	r24, r24
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	fc 01       	movw	r30, r24
    3afe:	e2 58       	subi	r30, 0x82	; 130
    3b00:	fe 4f       	sbci	r31, 0xFE	; 254
    3b02:	90 81       	ld	r25, Z
    3b04:	82 e0       	ldi	r24, 0x02	; 2
    3b06:	69 2f       	mov	r22, r25
    3b08:	40 e0       	ldi	r20, 0x00	; 0
    3b0a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>

		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM; Local_u8RowIdx++)
    3b0e:	19 82       	std	Y+1, r1	; 0x01
    3b10:	3d c0       	rjmp	.+122    	; 0x3b8c <KPD_u8GetPressedKey+0xae>
		{
			// Get Current Row
			DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	88 2f       	mov	r24, r24
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	fc 01       	movw	r30, r24
    3b1a:	e6 58       	subi	r30, 0x86	; 134
    3b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b1e:	90 81       	ld	r25, Z
    3b20:	9e 01       	movw	r18, r28
    3b22:	2c 5f       	subi	r18, 0xFC	; 252
    3b24:	3f 4f       	sbci	r19, 0xFF	; 255
    3b26:	82 e0       	ldi	r24, 0x02	; 2
    3b28:	69 2f       	mov	r22, r25
    3b2a:	a9 01       	movw	r20, r18
    3b2c:	0e 94 2e 10 	call	0x205c	; 0x205c <DIO_GetPinValue>

			// Check pressed
			if( DIO_u8PIN_LOW == Local_u8PinState )
    3b30:	8c 81       	ldd	r24, Y+4	; 0x04
    3b32:	88 23       	and	r24, r24
    3b34:	41 f5       	brne	.+80     	; 0x3b86 <KPD_u8GetPressedKey+0xa8>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
    3b38:	48 2f       	mov	r20, r24
    3b3a:	50 e0       	ldi	r21, 0x00	; 0
    3b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3e:	28 2f       	mov	r18, r24
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	ca 01       	movw	r24, r20
    3b44:	88 0f       	add	r24, r24
    3b46:	99 1f       	adc	r25, r25
    3b48:	88 0f       	add	r24, r24
    3b4a:	99 1f       	adc	r25, r25
    3b4c:	82 0f       	add	r24, r18
    3b4e:	93 1f       	adc	r25, r19
    3b50:	fc 01       	movw	r30, r24
    3b52:	ee 57       	subi	r30, 0x7E	; 126
    3b54:	fe 4f       	sbci	r31, 0xFE	; 254
    3b56:	80 81       	ld	r24, Z
    3b58:	8b 83       	std	Y+3, r24	; 0x03
    3b5a:	0f c0       	rjmp	.+30     	; 0x3b7a <KPD_u8GetPressedKey+0x9c>

				// Busy waiting until released
				while( DIO_u8PIN_LOW == Local_u8PinState )
				{
					DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    3b5c:	89 81       	ldd	r24, Y+1	; 0x01
    3b5e:	88 2f       	mov	r24, r24
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	fc 01       	movw	r30, r24
    3b64:	e6 58       	subi	r30, 0x86	; 134
    3b66:	fe 4f       	sbci	r31, 0xFE	; 254
    3b68:	90 81       	ld	r25, Z
    3b6a:	9e 01       	movw	r18, r28
    3b6c:	2c 5f       	subi	r18, 0xFC	; 252
    3b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b70:	82 e0       	ldi	r24, 0x02	; 2
    3b72:	69 2f       	mov	r22, r25
    3b74:	a9 01       	movw	r20, r18
    3b76:	0e 94 2e 10 	call	0x205c	; 0x205c <DIO_GetPinValue>
			if( DIO_u8PIN_LOW == Local_u8PinState )
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				// Busy waiting until released
				while( DIO_u8PIN_LOW == Local_u8PinState )
    3b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b7c:	88 23       	and	r24, r24
    3b7e:	71 f3       	breq	.-36     	; 0x3b5c <KPD_u8GetPressedKey+0x7e>
				{
					DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    3b80:	8b 81       	ldd	r24, Y+3	; 0x03
    3b82:	8d 83       	std	Y+5, r24	; 0x05
    3b84:	1c c0       	rjmp	.+56     	; 0x3bbe <KPD_u8GetPressedKey+0xe0>
	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
	{
		// Activate current column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);

		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM; Local_u8RowIdx++)
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	8f 5f       	subi	r24, 0xFF	; 255
    3b8a:	89 83       	std	Y+1, r24	; 0x01
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	84 30       	cpi	r24, 0x04	; 4
    3b90:	08 f4       	brcc	.+2      	; 0x3b94 <KPD_u8GetPressedKey+0xb6>
    3b92:	bf cf       	rjmp	.-130    	; 0x3b12 <KPD_u8GetPressedKey+0x34>
				return Local_u8PressedKey;
			}

		}
		// Deactivate current Column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
    3b94:	8a 81       	ldd	r24, Y+2	; 0x02
    3b96:	88 2f       	mov	r24, r24
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	fc 01       	movw	r30, r24
    3b9c:	e2 58       	subi	r30, 0x82	; 130
    3b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba0:	90 81       	ld	r25, Z
    3ba2:	82 e0       	ldi	r24, 0x02	; 2
    3ba4:	69 2f       	mov	r22, r25
    3ba6:	41 e0       	ldi	r20, 0x01	; 1
    3ba8:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
			KPD_ROW_PIN1,
			KPD_ROW_PIN2,
			KPD_ROW_PIN3
	};

	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
    3bac:	8a 81       	ldd	r24, Y+2	; 0x02
    3bae:	8f 5f       	subi	r24, 0xFF	; 255
    3bb0:	8a 83       	std	Y+2, r24	; 0x02
    3bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb4:	84 30       	cpi	r24, 0x04	; 4
    3bb6:	08 f4       	brcc	.+2      	; 0x3bba <KPD_u8GetPressedKey+0xdc>
    3bb8:	9e cf       	rjmp	.-196    	; 0x3af6 <KPD_u8GetPressedKey+0x18>
		}
		// Deactivate current Column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);

	}
	return Local_u8PressedKey;
    3bba:	8b 81       	ldd	r24, Y+3	; 0x03
    3bbc:	8d 83       	std	Y+5, r24	; 0x05
    3bbe:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3bc0:	0f 90       	pop	r0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	cf 91       	pop	r28
    3bcc:	df 91       	pop	r29
    3bce:	08 95       	ret

00003bd0 <Data_Read>:
u8 volatile ADC_Read = 0;

// SLAVE

void Data_Read()
{
    3bd0:	df 93       	push	r29
    3bd2:	cf 93       	push	r28
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
	SPIFlag = 1;
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	80 93 92 01 	sts	0x0192, r24
	TimerCounter = 0;
    3bde:	10 92 ab 01 	sts	0x01AB, r1
}
    3be2:	cf 91       	pop	r28
    3be4:	df 91       	pop	r29
    3be6:	08 95       	ret

00003be8 <Time_Fun>:

void Time_Fun()
{
    3be8:	df 93       	push	r29
    3bea:	cf 93       	push	r28
    3bec:	cd b7       	in	r28, 0x3d	; 61
    3bee:	de b7       	in	r29, 0x3e	; 62
	TimerCounter++;
    3bf0:	80 91 ab 01 	lds	r24, 0x01AB
    3bf4:	8f 5f       	subi	r24, 0xFF	; 255
    3bf6:	80 93 ab 01 	sts	0x01AB, r24

	if( TimerCounter == ( DELAY_TIME * 10 ))
    3bfa:	80 91 ab 01 	lds	r24, 0x01AB
    3bfe:	88 2f       	mov	r24, r24
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	aa 27       	eor	r26, r26
    3c04:	97 fd       	sbrc	r25, 7
    3c06:	a0 95       	com	r26
    3c08:	ba 2f       	mov	r27, r26
    3c0a:	bc 01       	movw	r22, r24
    3c0c:	cd 01       	movw	r24, r26
    3c0e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	bc 01       	movw	r22, r24
    3c18:	cd 01       	movw	r24, r26
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	40 e4       	ldi	r20, 0x40	; 64
    3c20:	52 e4       	ldi	r21, 0x42	; 66
    3c22:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3c26:	88 23       	and	r24, r24
    3c28:	29 f4       	brne	.+10     	; 0x3c34 <Time_Fun+0x4c>
	{
		TimerCounter = 0;
    3c2a:	10 92 ab 01 	sts	0x01AB, r1
		TimerFlag = 1;
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	80 93 aa 01 	sts	0x01AA, r24
	}
}
    3c34:	cf 91       	pop	r28
    3c36:	df 91       	pop	r29
    3c38:	08 95       	ret

00003c3a <ADC_READ_DATA>:

// SLAVE

void ADC_READ_DATA()
{
    3c3a:	df 93       	push	r29
    3c3c:	cf 93       	push	r28
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
	ADC_Read = ADC_u16ReadADCInMV()/10;
    3c42:	0e 94 bd 11 	call	0x237a	; 0x237a <ADC_u16ReadADCInMV>
    3c46:	2a e0       	ldi	r18, 0x0A	; 10
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	b9 01       	movw	r22, r18
    3c4c:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <__udivmodhi4>
    3c50:	cb 01       	movw	r24, r22
    3c52:	80 93 ac 01 	sts	0x01AC, r24
	LCD_voidGoToPosition(1,0);
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	60 e0       	ldi	r22, 0x00	; 0
    3c5a:	0e 94 c0 1c 	call	0x3980	; 0x3980 <LCD_voidGoToPosition>
	LCD_voidWriteIntData(ADC_Read);
    3c5e:	80 91 ac 01 	lds	r24, 0x01AC
    3c62:	88 2f       	mov	r24, r24
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	a0 e0       	ldi	r26, 0x00	; 0
    3c68:	b0 e0       	ldi	r27, 0x00	; 0
    3c6a:	bc 01       	movw	r22, r24
    3c6c:	cd 01       	movw	r24, r26
    3c6e:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <LCD_voidWriteIntData>
	ADC_voidStartInterruptConversion(0);
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	0e 94 9d 11 	call	0x233a	; 0x233a <ADC_voidStartInterruptConversion>
}
    3c78:	cf 91       	pop	r28
    3c7a:	df 91       	pop	r29
    3c7c:	08 95       	ret

00003c7e <main>:

int main(void)
{
    3c7e:	df 93       	push	r29
    3c80:	cf 93       	push	r28
    3c82:	cd b7       	in	r28, 0x3d	; 61
    3c84:	de b7       	in	r29, 0x3e	; 62

	PORT_voidInit();
    3c86:	0e 94 45 0c 	call	0x188a	; 0x188a <PORT_voidInit>
	LCD_voidInit();
    3c8a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_voidInit>
	GIE_voidEnable();
    3c8e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <GIE_voidEnable>

	ADC_SetCallback(ADC_READ_DATA);
    3c92:	8d e1       	ldi	r24, 0x1D	; 29
    3c94:	9e e1       	ldi	r25, 0x1E	; 30
    3c96:	0e 94 15 12 	call	0x242a	; 0x242a <ADC_SetCallback>
	ADC_voidInit();
    3c9a:	0e 94 c9 10 	call	0x2192	; 0x2192 <ADC_voidInit>
	ADC_voidEnable();
    3c9e:	0e 94 06 11 	call	0x220c	; 0x220c <ADC_voidEnable>

	SPI_voidCallBack(Data_Read);
    3ca2:	88 ee       	ldi	r24, 0xE8	; 232
    3ca4:	9d e1       	ldi	r25, 0x1D	; 29
    3ca6:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <SPI_voidCallBack>
	SPI_voidSlaveInit();
    3caa:	0e 94 ab 0b 	call	0x1756	; 0x1756 <SPI_voidSlaveInit>

	TMR1_voidTimer1CTCSetCallBack(Time_Fun);
    3cae:	84 ef       	ldi	r24, 0xF4	; 244
    3cb0:	9d e1       	ldi	r25, 0x1D	; 29
    3cb2:	0e 94 ed 0a 	call	0x15da	; 0x15da <TMR1_voidTimer1CTCSetCallBack>
	TMR1_voidInit();
    3cb6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TMR1_voidInit>

	LCD_voidGoToPosition(0,0);
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	60 e0       	ldi	r22, 0x00	; 0
    3cbe:	0e 94 c0 1c 	call	0x3980	; 0x3980 <LCD_voidGoToPosition>
	LCD_voidWriteString((u8*)"Slave Screen.");
    3cc2:	80 e6       	ldi	r24, 0x60	; 96
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LCD_voidWriteString>
	LCD_voidGoToPosition(1,0);
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	60 e0       	ldi	r22, 0x00	; 0
    3cce:	0e 94 c0 1c 	call	0x3980	; 0x3980 <LCD_voidGoToPosition>


	ADC_voidInterrputEnable();
    3cd2:	0e 94 14 11 	call	0x2228	; 0x2228 <ADC_voidInterrputEnable>
	ADC_voidStartInterruptConversion(0);
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
    3cd8:	0e 94 9d 11 	call	0x233a	; 0x233a <ADC_voidStartInterruptConversion>



	while(1)
	{
		DIO_u8SetPinValue(EXIN_PORT_PIN, DIO_u8PIN_HIGH);
    3cdc:	82 e0       	ldi	r24, 0x02	; 2
    3cde:	60 e0       	ldi	r22, 0x00	; 0
    3ce0:	41 e0       	ldi	r20, 0x01	; 1
    3ce2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>


		if( SPIFlag == 1 )
    3ce6:	80 91 92 01 	lds	r24, 0x0192
    3cea:	81 30       	cpi	r24, 0x01	; 1
    3cec:	11 f4       	brne	.+4      	; 0x3cf2 <main+0x74>
		{
			SPIFlag = 0;
    3cee:	10 92 92 01 	sts	0x0192, r1
		}

		if( ADC_Read >= 40)
    3cf2:	80 91 ac 01 	lds	r24, 0x01AC
    3cf6:	88 32       	cpi	r24, 0x28	; 40
    3cf8:	78 f0       	brcs	.+30     	; 0x3d18 <main+0x9a>
		{
			SPI_voidTransmit(ADC_Read);
    3cfa:	80 91 ac 01 	lds	r24, 0x01AC
    3cfe:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <SPI_voidTransmit>
			DIO_u8SetPinValue(EXIN_PORT_PIN, DIO_u8PIN_LOW);
    3d02:	82 e0       	ldi	r24, 0x02	; 2
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
			DIO_u8SetPinValue(SENS_PORT_PIN, DIO_u8PIN_LOW);
    3d0c:	82 e0       	ldi	r24, 0x02	; 2
    3d0e:	61 e0       	ldi	r22, 0x01	; 1
    3d10:	40 e0       	ldi	r20, 0x00	; 0
    3d12:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
    3d16:	e2 cf       	rjmp	.-60     	; 0x3cdc <main+0x5e>
		}
		else if( TimerFlag == 1)
    3d18:	80 91 aa 01 	lds	r24, 0x01AA
    3d1c:	81 30       	cpi	r24, 0x01	; 1
    3d1e:	39 f4       	brne	.+14     	; 0x3d2e <main+0xb0>
		{
			SPI_voidTransmit(ADC_Read);
    3d20:	80 91 ac 01 	lds	r24, 0x01AC
    3d24:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <SPI_voidTransmit>
			TimerFlag = 0;
    3d28:	10 92 aa 01 	sts	0x01AA, r1
    3d2c:	d7 cf       	rjmp	.-82     	; 0x3cdc <main+0x5e>
		}
		else
		{
			DIO_u8SetPinValue(SENS_PORT_PIN, DIO_u8PIN_HIGH);
    3d2e:	82 e0       	ldi	r24, 0x02	; 2
    3d30:	61 e0       	ldi	r22, 0x01	; 1
    3d32:	41 e0       	ldi	r20, 0x01	; 1
    3d34:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <DIO_u8SetPinValue>
    3d38:	d1 cf       	rjmp	.-94     	; 0x3cdc <main+0x5e>

00003d3a <__mulsi3>:
    3d3a:	62 9f       	mul	r22, r18
    3d3c:	d0 01       	movw	r26, r0
    3d3e:	73 9f       	mul	r23, r19
    3d40:	f0 01       	movw	r30, r0
    3d42:	82 9f       	mul	r24, r18
    3d44:	e0 0d       	add	r30, r0
    3d46:	f1 1d       	adc	r31, r1
    3d48:	64 9f       	mul	r22, r20
    3d4a:	e0 0d       	add	r30, r0
    3d4c:	f1 1d       	adc	r31, r1
    3d4e:	92 9f       	mul	r25, r18
    3d50:	f0 0d       	add	r31, r0
    3d52:	83 9f       	mul	r24, r19
    3d54:	f0 0d       	add	r31, r0
    3d56:	74 9f       	mul	r23, r20
    3d58:	f0 0d       	add	r31, r0
    3d5a:	65 9f       	mul	r22, r21
    3d5c:	f0 0d       	add	r31, r0
    3d5e:	99 27       	eor	r25, r25
    3d60:	72 9f       	mul	r23, r18
    3d62:	b0 0d       	add	r27, r0
    3d64:	e1 1d       	adc	r30, r1
    3d66:	f9 1f       	adc	r31, r25
    3d68:	63 9f       	mul	r22, r19
    3d6a:	b0 0d       	add	r27, r0
    3d6c:	e1 1d       	adc	r30, r1
    3d6e:	f9 1f       	adc	r31, r25
    3d70:	bd 01       	movw	r22, r26
    3d72:	cf 01       	movw	r24, r30
    3d74:	11 24       	eor	r1, r1
    3d76:	08 95       	ret

00003d78 <__udivmodhi4>:
    3d78:	aa 1b       	sub	r26, r26
    3d7a:	bb 1b       	sub	r27, r27
    3d7c:	51 e1       	ldi	r21, 0x11	; 17
    3d7e:	07 c0       	rjmp	.+14     	; 0x3d8e <__udivmodhi4_ep>

00003d80 <__udivmodhi4_loop>:
    3d80:	aa 1f       	adc	r26, r26
    3d82:	bb 1f       	adc	r27, r27
    3d84:	a6 17       	cp	r26, r22
    3d86:	b7 07       	cpc	r27, r23
    3d88:	10 f0       	brcs	.+4      	; 0x3d8e <__udivmodhi4_ep>
    3d8a:	a6 1b       	sub	r26, r22
    3d8c:	b7 0b       	sbc	r27, r23

00003d8e <__udivmodhi4_ep>:
    3d8e:	88 1f       	adc	r24, r24
    3d90:	99 1f       	adc	r25, r25
    3d92:	5a 95       	dec	r21
    3d94:	a9 f7       	brne	.-22     	; 0x3d80 <__udivmodhi4_loop>
    3d96:	80 95       	com	r24
    3d98:	90 95       	com	r25
    3d9a:	bc 01       	movw	r22, r24
    3d9c:	cd 01       	movw	r24, r26
    3d9e:	08 95       	ret

00003da0 <__divmodsi4>:
    3da0:	97 fb       	bst	r25, 7
    3da2:	09 2e       	mov	r0, r25
    3da4:	05 26       	eor	r0, r21
    3da6:	0e d0       	rcall	.+28     	; 0x3dc4 <__divmodsi4_neg1>
    3da8:	57 fd       	sbrc	r21, 7
    3daa:	04 d0       	rcall	.+8      	; 0x3db4 <__divmodsi4_neg2>
    3dac:	14 d0       	rcall	.+40     	; 0x3dd6 <__udivmodsi4>
    3dae:	0a d0       	rcall	.+20     	; 0x3dc4 <__divmodsi4_neg1>
    3db0:	00 1c       	adc	r0, r0
    3db2:	38 f4       	brcc	.+14     	; 0x3dc2 <__divmodsi4_exit>

00003db4 <__divmodsi4_neg2>:
    3db4:	50 95       	com	r21
    3db6:	40 95       	com	r20
    3db8:	30 95       	com	r19
    3dba:	21 95       	neg	r18
    3dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbe:	4f 4f       	sbci	r20, 0xFF	; 255
    3dc0:	5f 4f       	sbci	r21, 0xFF	; 255

00003dc2 <__divmodsi4_exit>:
    3dc2:	08 95       	ret

00003dc4 <__divmodsi4_neg1>:
    3dc4:	f6 f7       	brtc	.-4      	; 0x3dc2 <__divmodsi4_exit>
    3dc6:	90 95       	com	r25
    3dc8:	80 95       	com	r24
    3dca:	70 95       	com	r23
    3dcc:	61 95       	neg	r22
    3dce:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd0:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd4:	08 95       	ret

00003dd6 <__udivmodsi4>:
    3dd6:	a1 e2       	ldi	r26, 0x21	; 33
    3dd8:	1a 2e       	mov	r1, r26
    3dda:	aa 1b       	sub	r26, r26
    3ddc:	bb 1b       	sub	r27, r27
    3dde:	fd 01       	movw	r30, r26
    3de0:	0d c0       	rjmp	.+26     	; 0x3dfc <__udivmodsi4_ep>

00003de2 <__udivmodsi4_loop>:
    3de2:	aa 1f       	adc	r26, r26
    3de4:	bb 1f       	adc	r27, r27
    3de6:	ee 1f       	adc	r30, r30
    3de8:	ff 1f       	adc	r31, r31
    3dea:	a2 17       	cp	r26, r18
    3dec:	b3 07       	cpc	r27, r19
    3dee:	e4 07       	cpc	r30, r20
    3df0:	f5 07       	cpc	r31, r21
    3df2:	20 f0       	brcs	.+8      	; 0x3dfc <__udivmodsi4_ep>
    3df4:	a2 1b       	sub	r26, r18
    3df6:	b3 0b       	sbc	r27, r19
    3df8:	e4 0b       	sbc	r30, r20
    3dfa:	f5 0b       	sbc	r31, r21

00003dfc <__udivmodsi4_ep>:
    3dfc:	66 1f       	adc	r22, r22
    3dfe:	77 1f       	adc	r23, r23
    3e00:	88 1f       	adc	r24, r24
    3e02:	99 1f       	adc	r25, r25
    3e04:	1a 94       	dec	r1
    3e06:	69 f7       	brne	.-38     	; 0x3de2 <__udivmodsi4_loop>
    3e08:	60 95       	com	r22
    3e0a:	70 95       	com	r23
    3e0c:	80 95       	com	r24
    3e0e:	90 95       	com	r25
    3e10:	9b 01       	movw	r18, r22
    3e12:	ac 01       	movw	r20, r24
    3e14:	bd 01       	movw	r22, r26
    3e16:	cf 01       	movw	r24, r30
    3e18:	08 95       	ret

00003e1a <__prologue_saves__>:
    3e1a:	2f 92       	push	r2
    3e1c:	3f 92       	push	r3
    3e1e:	4f 92       	push	r4
    3e20:	5f 92       	push	r5
    3e22:	6f 92       	push	r6
    3e24:	7f 92       	push	r7
    3e26:	8f 92       	push	r8
    3e28:	9f 92       	push	r9
    3e2a:	af 92       	push	r10
    3e2c:	bf 92       	push	r11
    3e2e:	cf 92       	push	r12
    3e30:	df 92       	push	r13
    3e32:	ef 92       	push	r14
    3e34:	ff 92       	push	r15
    3e36:	0f 93       	push	r16
    3e38:	1f 93       	push	r17
    3e3a:	cf 93       	push	r28
    3e3c:	df 93       	push	r29
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	ca 1b       	sub	r28, r26
    3e44:	db 0b       	sbc	r29, r27
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	de bf       	out	0x3e, r29	; 62
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	cd bf       	out	0x3d, r28	; 61
    3e50:	09 94       	ijmp

00003e52 <__epilogue_restores__>:
    3e52:	2a 88       	ldd	r2, Y+18	; 0x12
    3e54:	39 88       	ldd	r3, Y+17	; 0x11
    3e56:	48 88       	ldd	r4, Y+16	; 0x10
    3e58:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e60:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e62:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e64:	b9 84       	ldd	r11, Y+9	; 0x09
    3e66:	c8 84       	ldd	r12, Y+8	; 0x08
    3e68:	df 80       	ldd	r13, Y+7	; 0x07
    3e6a:	ee 80       	ldd	r14, Y+6	; 0x06
    3e6c:	fd 80       	ldd	r15, Y+5	; 0x05
    3e6e:	0c 81       	ldd	r16, Y+4	; 0x04
    3e70:	1b 81       	ldd	r17, Y+3	; 0x03
    3e72:	aa 81       	ldd	r26, Y+2	; 0x02
    3e74:	b9 81       	ldd	r27, Y+1	; 0x01
    3e76:	ce 0f       	add	r28, r30
    3e78:	d1 1d       	adc	r29, r1
    3e7a:	0f b6       	in	r0, 0x3f	; 63
    3e7c:	f8 94       	cli
    3e7e:	de bf       	out	0x3e, r29	; 62
    3e80:	0f be       	out	0x3f, r0	; 63
    3e82:	cd bf       	out	0x3d, r28	; 61
    3e84:	ed 01       	movw	r28, r26
    3e86:	08 95       	ret

00003e88 <_exit>:
    3e88:	f8 94       	cli

00003e8a <__stop_program>:
    3e8a:	ff cf       	rjmp	.-2      	; 0x3e8a <__stop_program>
